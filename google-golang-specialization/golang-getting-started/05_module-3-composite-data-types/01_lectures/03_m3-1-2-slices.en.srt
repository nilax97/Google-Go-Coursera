1
00:00:10,670 --> 00:00:15,880
So, Slice is a data type that you don't see in a lot of other languages.

2
00:00:15,880 --> 00:00:18,330
Slice is a really useful data type.

3
00:00:18,330 --> 00:00:20,040
So, a lot of times actually,

4
00:00:20,040 --> 00:00:22,370
slices are used instead of arrays,

5
00:00:22,370 --> 00:00:23,830
because they are flexible,

6
00:00:23,830 --> 00:00:24,870
you can change their size,

7
00:00:24,870 --> 00:00:26,250
you can increase them in size.

8
00:00:26,250 --> 00:00:28,890
So, let's talk about slices and how they're defined.

9
00:00:28,890 --> 00:00:33,065
Basically, a slice is a window on an underlying array.

10
00:00:33,065 --> 00:00:34,305
So, for every slice,

11
00:00:34,305 --> 00:00:38,435
there's going to be some underlying array that is the basis for the slice.

12
00:00:38,435 --> 00:00:41,035
The slice is just a window of it, a piece of it.

13
00:00:41,035 --> 00:00:43,810
So, you've got a long array of 100 elements,

14
00:00:43,810 --> 00:00:46,470
the slice is just maybe just three,

15
00:00:46,470 --> 00:00:47,890
four and five or something like that,

16
00:00:47,890 --> 00:00:49,280
or elements five, six,

17
00:00:49,280 --> 00:00:50,925
seven, eight, and nine, something like that.

18
00:00:50,925 --> 00:00:52,675
That's basically what a slice is,

19
00:00:52,675 --> 00:00:55,910
a window on a possibly larger array.

20
00:00:55,910 --> 00:00:57,230
It doesn't have to be larger,

21
00:00:57,230 --> 00:00:59,350
the array can be the same size as the slice.

22
00:00:59,350 --> 00:01:02,900
Then, the slice is just looking at the entire array,

23
00:01:02,900 --> 00:01:04,890
but the array can be much bigger than the slice

24
00:01:04,890 --> 00:01:07,070
and the slice can be just a smaller window on it.

25
00:01:07,070 --> 00:01:09,640
So, that's essentially what a slice is.

26
00:01:09,640 --> 00:01:13,525
So slices can have variable size,

27
00:01:13,525 --> 00:01:14,680
up to the size of the array.

28
00:01:14,680 --> 00:01:16,940
This is one thing that's really nice about slices,

29
00:01:16,940 --> 00:01:18,460
you can increase the size of the slice.

30
00:01:18,460 --> 00:01:20,320
An array is a fixed size thing.

31
00:01:20,320 --> 00:01:25,490
So, let's say I have an array of size 100 and I have a slice of size 10,

32
00:01:25,490 --> 00:01:28,910
which on that array and it's the first 10.

33
00:01:28,910 --> 00:01:30,750
I can increase the size of the slice to 20,

34
00:01:30,750 --> 00:01:33,440
and just look at the next 10 elements in the array and then I

35
00:01:33,440 --> 00:01:36,380
can increase to 30 and include the next 10 elements in the array.

36
00:01:36,380 --> 00:01:39,675
So, slices, you can increase the size of the slice,

37
00:01:39,675 --> 00:01:41,660
where you can't do that to an array.

38
00:01:41,660 --> 00:01:44,375
So, that's a good feature of slices.

39
00:01:44,375 --> 00:01:49,470
Now, every slice has basically three properties.

40
00:01:49,470 --> 00:01:54,245
One is the pointer that indicates the start of the slice.

41
00:01:54,245 --> 00:01:56,770
So every slice, since it's a window on an array,

42
00:01:56,770 --> 00:01:59,660
has to point to some element of the array

43
00:01:59,660 --> 00:02:03,130
that is the first element that is included in the slice. That's the point.

44
00:02:03,130 --> 00:02:06,160
The next thing in a slice, that's property of a slice,

45
00:02:06,160 --> 00:02:09,725
is its length, it's the number of elements in the slice.

46
00:02:09,725 --> 00:02:12,935
Because they all have a length. The third is the capacity.

47
00:02:12,935 --> 00:02:16,230
So, the capacity is the maximum number of elements in the slice.

48
00:02:16,230 --> 00:02:18,740
Now, that's defined by looking at

49
00:02:18,740 --> 00:02:21,290
the pointer which is the beginning of slice and looking at

50
00:02:21,290 --> 00:02:26,460
the difference between that and the size and the distance to the end of the whole array.

51
00:02:26,460 --> 00:02:30,385
Because a slice, it's size can be increased up to the size of the whole,

52
00:02:30,385 --> 00:02:31,810
up to the end of the array.

53
00:02:31,810 --> 00:02:34,460
So for instance, say you've got an array of size 100,

54
00:02:34,460 --> 00:02:35,995
you got a slice the size 10.

55
00:02:35,995 --> 00:02:37,580
You can increase that slice's size,

56
00:02:37,580 --> 00:02:40,010
say the slice starts right at the beginning of the array,

57
00:02:40,010 --> 00:02:43,100
you can increase the slice size all the way to 100, if you want to.

58
00:02:43,100 --> 00:02:45,045
So it has a capacity of 100.

59
00:02:45,045 --> 00:02:51,250
But, say you got an array of size 100 but this slice starts at array index 10,

60
00:02:51,250 --> 00:02:54,560
then it can only be increased to size 90,

61
00:02:54,560 --> 00:02:56,390
because by then you reach the end of the array.

62
00:02:56,390 --> 00:02:58,750
So the capacity of that slice is small.

63
00:02:58,750 --> 00:03:02,295
So, let's look at an example to see what I mean by these things.

64
00:03:02,295 --> 00:03:03,870
Slice examples.

65
00:03:03,870 --> 00:03:05,500
So, first we start with the underlying array.

66
00:03:05,500 --> 00:03:06,630
We got this array,

67
00:03:06,630 --> 00:03:09,115
we define it with this literal,

68
00:03:09,115 --> 00:03:10,930
it's got a, b,

69
00:03:10,930 --> 00:03:12,110
c, d, e, f,

70
00:03:12,110 --> 00:03:15,540
and g. That's the array, array of strings.

71
00:03:15,540 --> 00:03:18,320
Now, then we defined two slices on this,

72
00:03:18,320 --> 00:03:21,695
with that array as the underlying array, s1 and s2.

73
00:03:21,695 --> 00:03:23,890
Now, here's how we define these slices.

74
00:03:23,890 --> 00:03:25,635
We use this bracket notation,

75
00:03:25,635 --> 00:03:29,750
we use a colon inside the brackets to define the beginning and the ends of the slice.

76
00:03:29,750 --> 00:03:31,250
So, if you look at s1,

77
00:03:31,250 --> 00:03:33,440
s1 colon equals array,

78
00:03:33,440 --> 00:03:36,220
arr, bracket one colon three.

79
00:03:36,220 --> 00:03:40,440
The one is the pointer to the first element of the array,

80
00:03:40,440 --> 00:03:42,125
that is inside the slice,

81
00:03:42,125 --> 00:03:47,665
and the three is the index just after the end of the slice.

82
00:03:47,665 --> 00:03:49,200
So, that slice, s1,

83
00:03:49,200 --> 00:03:52,595
it includes array elements one and two, not three.

84
00:03:52,595 --> 00:03:56,085
So, the second number after the colon is just after the end.

85
00:03:56,085 --> 00:03:57,490
Now, if we look at s2.

86
00:03:57,490 --> 00:03:58,715
S2 colon five.

87
00:03:58,715 --> 00:04:01,290
Right, so S2 start at two.

88
00:04:01,290 --> 00:04:02,650
It include three and four,

89
00:04:02,650 --> 00:04:04,100
does not include five.

90
00:04:04,100 --> 00:04:07,525
So, we could see the picture down here at the bottom.

91
00:04:07,525 --> 00:04:09,910
You got the array in blue, the whole array.

92
00:04:09,910 --> 00:04:11,930
It has the a, b, c, d, e, f,

93
00:04:11,930 --> 00:04:14,435
g. Then in red,

94
00:04:14,435 --> 00:04:16,350
I've highlighted s1 and s2.

95
00:04:16,350 --> 00:04:20,880
So, s1, it includes index one and two because one colon three,

96
00:04:20,880 --> 00:04:22,650
so three is just past one past the N,

97
00:04:22,650 --> 00:04:24,230
and s2 includes two,

98
00:04:24,230 --> 00:04:28,485
three and four, and notice that these two slices overlap, and that's okay.

99
00:04:28,485 --> 00:04:31,520
If you look at s1 and s2,

100
00:04:31,520 --> 00:04:35,115
they both include array index two, and that's fine.

101
00:04:35,115 --> 00:04:42,350
Slices can overlap and refer to the same elements inside the underlying array. All right.

102
00:04:42,350 --> 00:04:44,685
So, the length and capacity,

103
00:04:44,685 --> 00:04:47,265
so there are two functions len and cap,

104
00:04:47,265 --> 00:04:50,270
which return the length and capacity of a slice.

105
00:04:50,270 --> 00:04:53,240
So, we got our array a1 here,

106
00:04:53,240 --> 00:04:55,490
and it's three elements long; a, b, c. Then,

107
00:04:55,490 --> 00:04:58,845
we define a slice, sli1 I'm calling it this time,

108
00:04:58,845 --> 00:05:02,865
and that is the array zero colon one.

109
00:05:02,865 --> 00:05:08,780
Okay. So, that means that this slice includes array index zero but not array index one.

110
00:05:08,780 --> 00:05:11,620
So, its length is actually one, should be one.

111
00:05:11,620 --> 00:05:14,795
It only has one element in it, array index zero.

112
00:05:14,795 --> 00:05:17,900
So, now the next statement, we do the print same.

113
00:05:17,900 --> 00:05:21,055
We print the length and the capacity. The length is one.

114
00:05:21,055 --> 00:05:24,265
Zero, zero is the only thing that's actually in the slice,

115
00:05:24,265 --> 00:05:26,635
but its capacity is still three,

116
00:05:26,635 --> 00:05:31,355
because its size could increase up to three

117
00:05:31,355 --> 00:05:34,040
if were to increase the size of the slice to go all the way

118
00:05:34,040 --> 00:05:36,650
to the end of the array since the array has three elements in it,

119
00:05:36,650 --> 00:05:39,715
and we are starting the slice at the beginning at array index zero,

120
00:05:39,715 --> 00:05:42,160
we could go all the way through array index zero, one,

121
00:05:42,160 --> 00:05:45,340
and two and the length of the slice could be up to three.

122
00:05:45,340 --> 00:05:47,560
So its capacity is three.

123
00:05:48,260 --> 00:05:52,740
Now, accessing slices or really referring to slices.

124
00:05:52,740 --> 00:05:56,164
So, when you write to a slice,

125
00:05:56,164 --> 00:05:58,190
to an element in a slice,

126
00:05:58,190 --> 00:06:00,685
you are writing to the underlying array.

127
00:06:00,685 --> 00:06:04,260
Overlapping slices can refer to the same array elements.

128
00:06:04,260 --> 00:06:05,600
So, you change one slice,

129
00:06:05,600 --> 00:06:07,185
you can change the underlying array,

130
00:06:07,185 --> 00:06:10,960
and you can change any of the slice that also accesses that,

131
00:06:10,960 --> 00:06:13,225
it also includes that array element.

132
00:06:13,225 --> 00:06:16,830
So, here we've got these in this picture, we show in this array.

133
00:06:16,830 --> 00:06:20,020
We got s1 and s2 are two different slices defined on it.

134
00:06:20,020 --> 00:06:23,825
See, in green, a circle that array element two,

135
00:06:23,825 --> 00:06:27,315
with the letter of the string c. So,

136
00:06:27,315 --> 00:06:31,490
that one is actually including s1 and s2.

137
00:06:31,490 --> 00:06:33,710
Now, in s1 with respect to s1,

138
00:06:33,710 --> 00:06:38,870
that is the s1 bracket one.

139
00:06:38,870 --> 00:06:41,700
It refers to that second element of the array,

140
00:06:41,700 --> 00:06:44,690
because s1 zero would refer to the first element of the array,

141
00:06:44,690 --> 00:06:45,855
because that's where s1 starts.

142
00:06:45,855 --> 00:06:48,800
So, s1 bracket one refers to that c,

143
00:06:48,800 --> 00:06:50,470
that letter c. Now,

144
00:06:50,470 --> 00:06:53,490
s2, that second element of the array,

145
00:06:53,490 --> 00:06:55,275
is the first element in s2.

146
00:06:55,275 --> 00:06:57,690
So, that's the same as s2 bracket zero.

147
00:06:57,690 --> 00:07:00,300
So, these two print statements will print the same thing,

148
00:07:00,300 --> 00:07:04,800
the letter C, because s1 bracket one is the same as s2 bracket zero.

149
00:07:04,800 --> 00:07:08,620
They're both referring of the same elements in the underlying array.

150
00:07:09,340 --> 00:07:12,670
Now, we talked about array literals,

151
00:07:12,670 --> 00:07:14,420
you can also have slice literals.

152
00:07:14,420 --> 00:07:16,160
They can be used to initialize the slice,

153
00:07:16,160 --> 00:07:19,250
just like an array literal can be used to initialize an array.

154
00:07:19,250 --> 00:07:22,495
Now, remember that every slice has to have an underlying array.

155
00:07:22,495 --> 00:07:24,360
So, when you initialize a slice,

156
00:07:24,360 --> 00:07:26,090
that means you're creating an array.

157
00:07:26,090 --> 00:07:31,840
You have to create the underlying array and the slice just covers the entire array.

158
00:07:31,840 --> 00:07:35,070
So, when when you use a slice literal to define a slice,

159
00:07:35,070 --> 00:07:37,910
it actually creates an underlying array and it

160
00:07:37,910 --> 00:07:40,930
creates a slice to reference the entire array.

161
00:07:40,930 --> 00:07:45,680
So, the length and the capacity of the slice are the same.

162
00:07:45,680 --> 00:07:47,770
So, if you do this,

163
00:07:47,770 --> 00:07:51,320
if you use a slice literal to create this array,

164
00:07:51,320 --> 00:07:55,040
its pointer will point to the beginning of the array and its length will

165
00:07:55,040 --> 00:07:58,585
be the length of the array and its capacity will also be the length of the array.

166
00:07:58,585 --> 00:08:00,980
So, the slice points to the entire array when

167
00:08:00,980 --> 00:08:03,335
you use a slice literal to define in this way.

168
00:08:03,335 --> 00:08:05,235
So, we can see that here,

169
00:08:05,235 --> 00:08:07,450
we're defining it using a slice literal.

170
00:08:07,450 --> 00:08:11,340
SLI is defined as a slice literal and it defines the underlying array.

171
00:08:11,340 --> 00:08:13,740
You know that this is a slice literal because you can

172
00:08:13,740 --> 00:08:17,065
see where I say sli colon equals brackets.

173
00:08:17,065 --> 00:08:19,635
Normally, in the brackets you'd put the length if it was an array,

174
00:08:19,635 --> 00:08:24,680
or put five or three in this case or you'd put least dot dot dot to say this is an array,

175
00:08:24,680 --> 00:08:29,460
it's length should be inferred from the number of elements inside the curly brackets.

176
00:08:29,460 --> 00:08:32,230
But in this case, we didn't put anything in the brackets.

177
00:08:32,230 --> 00:08:35,920
So, the compiler says," Oh this must be a slice," and what it does

178
00:08:35,920 --> 00:08:40,680
is it creates the underlying array and then it makes a slice point to the whole array.