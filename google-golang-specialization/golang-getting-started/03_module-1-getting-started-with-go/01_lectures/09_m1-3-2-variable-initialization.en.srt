1
00:00:00,000 --> 00:00:10,000
[MUSIC]

2
00:00:11,420 --> 00:00:15,296
So we're talking about variables and we're
going to talk about how you initialize

3
00:00:15,296 --> 00:00:18,060
them, but first,
let's finish up the types.

4
00:00:18,060 --> 00:00:19,700
So every variable has to have a type.

5
00:00:20,950 --> 00:00:24,320
And you can make type declarations
where you actually define an alias,

6
00:00:24,320 --> 00:00:26,380
an alternate name for a type.

7
00:00:26,380 --> 00:00:31,790
So sometimes this is useful for
clarity inside a particular application.

8
00:00:31,790 --> 00:00:36,600
For instance here,
it could help you, say you got

9
00:00:36,600 --> 00:00:40,940
you got some kind of application and
it's working on temperatures.

10
00:00:40,940 --> 00:00:42,910
Temperatures are something
that it's manipulating, right?

11
00:00:42,910 --> 00:00:46,320
And every temperature you want
it to be a floating point value,

12
00:00:46,320 --> 00:00:47,930
64 bit floating point value.

13
00:00:47,930 --> 00:00:54,500
So you can define a new type, an alias for
a new type, type Celsius float64.

14
00:00:54,500 --> 00:00:58,660
In that case,
Celsius is exactly the same as float 64.

15
00:00:58,660 --> 00:01:03,640
Now, you can always declare
your variables to be float64,

16
00:01:03,640 --> 00:01:06,830
but Celsius might make sense in
the context of the application, right?

17
00:01:06,830 --> 00:01:08,750
Maybe the application
is about temperatures.

18
00:01:08,750 --> 00:01:11,770
So maybe you want to rename is
[COUGH] just to make it clearer for

19
00:01:11,770 --> 00:01:12,710
you as a programmer.

20
00:01:12,710 --> 00:01:16,036
Also, like the next one, type IDnum int.

21
00:01:16,036 --> 00:01:17,149
Maybe I want to,

22
00:01:17,149 --> 00:01:22,410
maybe I'm making some code that implements
a database of users or something.

23
00:01:22,410 --> 00:01:23,703
And every user has an ID number.

24
00:01:23,703 --> 00:01:26,960
So I know this type,
this concept ID number.

25
00:01:26,960 --> 00:01:29,268
I'd like to, I know it's an integer,
but I want to name it.

26
00:01:29,268 --> 00:01:30,870
I want to give it that name IDnum, so

27
00:01:30,870 --> 00:01:34,091
that I know every variable that it
declares an IDnum, it is an IDnum.

28
00:01:34,091 --> 00:01:38,610
I know something about it just
based on the name of the type.

29
00:01:38,610 --> 00:01:43,060
So once you declare a type like this,
type Celsius float64 or

30
00:01:43,060 --> 00:01:47,020
type IDnum int, you can now declare
variables using that alias.

31
00:01:47,020 --> 00:01:49,990
So I can say var temp Celsius, right?

32
00:01:49,990 --> 00:01:56,180
And now temp is going to be float64
because float64 is aliased by Celsius.

33
00:01:56,180 --> 00:02:00,170
Also, var pid IDnum,
pid is actually an integer.

34
00:02:00,170 --> 00:02:02,800
But we call it an IDnum and
it makes things more clear.

35
00:02:04,470 --> 00:02:06,970
So initializing variable values,

36
00:02:06,970 --> 00:02:10,180
every variable has to be initialized
somehow before you use it.

37
00:02:11,320 --> 00:02:14,450
One way to initialize it is
in the declaration itself.

38
00:02:14,450 --> 00:02:17,976
So you can say var x int = 100.

39
00:02:17,976 --> 00:02:21,749
And that will make x an integer,
it'll declare it as an integer, but

40
00:02:21,749 --> 00:02:23,580
it'll also set it equal 100.

41
00:02:23,580 --> 00:02:26,282
Or you can just say var x = 100.

42
00:02:26,282 --> 00:02:29,635
Now, if you do that you're not
saying you want it as an integer.

43
00:02:29,635 --> 00:02:31,202
So it will infer the type,

44
00:02:31,202 --> 00:02:35,870
it compile with a further type based on
the type of the right hand side value.

45
00:02:35,870 --> 00:02:38,390
So the number 100 is an integer, so

46
00:02:38,390 --> 00:02:41,280
it says x must be an integer,
makes it an integer.

47
00:02:41,280 --> 00:02:42,370
Now, remember,

48
00:02:42,370 --> 00:02:47,684
sometimes this is an issue because maybe
it infers something you don't want, right?

49
00:02:47,684 --> 00:02:49,670
I like to specify myself, but maybe.

50
00:02:49,670 --> 00:02:54,646
So, for instance, say I say x = 100, but
I really want it to be a floating point.

51
00:02:54,646 --> 00:02:56,940
I mean, 100.something, right?

52
00:02:56,940 --> 00:03:00,605
But I call it 100 because that's my
initial temperature that I want, but

53
00:03:00,605 --> 00:03:02,573
I want it to be a floating point value.

54
00:03:02,573 --> 00:03:05,521
This will, if I don't specify, it'll say,
well, 100 could be an integer,

55
00:03:05,521 --> 00:03:06,880
it'll infer it as an integer.

56
00:03:06,880 --> 00:03:09,220
And then if I try to set x to 100.1,
I'll have a problem.

57
00:03:10,950 --> 00:03:14,360
So I like to specify the type,
but you don't have to.

58
00:03:16,070 --> 00:03:18,548
Next up,
initializing after the declaration.

59
00:03:18,548 --> 00:03:22,952
So you can just say var x int, and
then afterwards you could say x = 100.

60
00:03:22,952 --> 00:03:24,830
And then it'll follow the line.

61
00:03:24,830 --> 00:03:26,180
That's another way.

62
00:03:26,180 --> 00:03:30,960
Now, if you don't explicitly initialize
a variable, it'll still get a value.

63
00:03:30,960 --> 00:03:33,660
It'll get the zero value for its type.

64
00:03:33,660 --> 00:03:36,290
So, for instance, say I say var x int.

65
00:03:36,290 --> 00:03:39,500
The 0 value for its type is 0, right?

66
00:03:39,500 --> 00:03:43,810
So x will be automatically assigned
to a 0, initialized to a 0,

67
00:03:43,810 --> 00:03:45,870
if I don't say anything else.

68
00:03:45,870 --> 00:03:50,270
If I say var x string, the zero value for
a string is just the empty string.

69
00:03:50,270 --> 00:03:52,650
So x would be initialized to
the empty string in that case.

70
00:03:54,090 --> 00:03:58,159
Now, another way to initialize variables
is using a short variable declaration.

71
00:03:59,220 --> 00:04:02,642
Now, in this case,
you're performing the declaration and

72
00:04:02,642 --> 00:04:06,890
the initialization together
using the colon equals operator.

73
00:04:06,890 --> 00:04:12,098
So up on the slide x := 100, okay?

74
00:04:12,098 --> 00:04:18,295
When you say that, this is a case where
x has not been declared yet, right?

75
00:04:18,295 --> 00:04:23,037
So this statement actually declares x and
initializes it.

76
00:04:23,037 --> 00:04:26,813
Now, the declaration, what happens is
that when you use that colon equal,

77
00:04:26,813 --> 00:04:30,120
the type that it sets it to be is
whatever's on the right hand side.

78
00:04:30,120 --> 00:04:32,340
So 100 in this case.

79
00:04:32,340 --> 00:04:37,170
It sets, it looks at 100, says, that's an
int and it infers x to be an integer and

80
00:04:37,170 --> 00:04:39,560
then it assigns it to the value 100.

81
00:04:39,560 --> 00:04:43,210
So variable is declared
as a type of expression,

82
00:04:43,210 --> 00:04:44,930
the type that's on the right hand side.

83
00:04:44,930 --> 00:04:48,770
So it does, this type of variable
declaration, it does the declaration and

84
00:04:48,770 --> 00:04:52,380
the assignment together in one
line with this special operator.

85
00:04:52,380 --> 00:04:53,930
You can only do this inside a function.

86
00:04:53,930 --> 00:04:57,310
So you can't do a short variable
declaration outside a function,

87
00:04:57,310 --> 00:04:58,800
that's not legal.

88
00:04:58,800 --> 00:05:00,046
So just know that.