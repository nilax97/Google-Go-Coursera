1
00:00:10,310 --> 00:00:15,610
Right now, we're going to talk about how code is organized in Go.

2
00:00:15,610 --> 00:00:17,520
First, we'll start with a workspace.

3
00:00:17,520 --> 00:00:19,720
So there's this idea of a workspace,

4
00:00:19,720 --> 00:00:23,815
and it's basically a directory where your Go stuff will go,

5
00:00:23,815 --> 00:00:24,930
so your Go files.

6
00:00:24,930 --> 00:00:29,295
Your Go source files and other files will go in this workspace directory.

7
00:00:29,295 --> 00:00:32,760
Typically, there's a actually a hierarchy of directories within

8
00:00:32,760 --> 00:00:34,440
your workspace where you will store

9
00:00:34,440 --> 00:00:37,290
the different types of Go files that you're working with.

10
00:00:37,290 --> 00:00:41,100
Now, the reason why we're doing this,

11
00:00:41,100 --> 00:00:44,599
why the Go language defines

12
00:00:44,599 --> 00:00:49,470
this hierarchy of directories is because common organization is good for sharing.

13
00:00:49,470 --> 00:00:52,320
So, a big motivation behind Go,

14
00:00:52,320 --> 00:00:57,350
the Go language is for people to work together easily.

15
00:00:57,350 --> 00:01:00,055
So, remember that when you're programming,

16
00:01:00,055 --> 00:01:01,470
not necessarily in this class,

17
00:01:01,470 --> 00:01:04,540
in this class you're working on learning the language,

18
00:01:04,540 --> 00:01:06,440
the different aspects of the language, but when you get

19
00:01:06,440 --> 00:01:08,880
outside and you're working in a company or something like this,

20
00:01:08,880 --> 00:01:10,590
it's never one person alone,

21
00:01:10,590 --> 00:01:12,320
it's always a big group.

22
00:01:12,320 --> 00:01:15,040
You're working with people all over the place.

23
00:01:15,040 --> 00:01:17,585
They have to be able to work with your code,

24
00:01:17,585 --> 00:01:20,260
look at your code, merge it with their code,

25
00:01:20,260 --> 00:01:22,220
link it to their code that sort of thing.

26
00:01:22,220 --> 00:01:24,790
So, there's always this sharing going on.

27
00:01:24,790 --> 00:01:26,480
Maybe you want to upload to GitHub and have

28
00:01:26,480 --> 00:01:28,895
a communal group of people working on code together.

29
00:01:28,895 --> 00:01:35,240
So for that, it is nice to have a common standardized organization of your files, right?

30
00:01:35,240 --> 00:01:38,365
It makes it easier to share because then everybody knows where everything is.

31
00:01:38,365 --> 00:01:40,830
Tools know where things are and stuff like that.

32
00:01:40,830 --> 00:01:44,180
So, inside your workspace directory,

33
00:01:44,180 --> 00:01:47,215
what is recommended are these three subdirectories.

34
00:01:47,215 --> 00:01:49,665
The source directory, it contains the source files,

35
00:01:49,665 --> 00:01:51,300
your source code your Go code.

36
00:01:51,300 --> 00:01:53,390
Package directory contains packages,

37
00:01:53,390 --> 00:01:56,479
the other packages that you're going to link in that you need,

38
00:01:56,479 --> 00:02:00,950
and then the bin directory that contains all your executables, your compiled executables.

39
00:02:00,950 --> 00:02:05,310
Now, the programmer typically has one workspace for many projects.

40
00:02:05,310 --> 00:02:10,670
So, I typically use my one workspace directory and I can have 20 projects,

41
00:02:10,670 --> 00:02:15,140
20 different Go projects I'm working on in the same workspace directory. That's common.

42
00:02:15,140 --> 00:02:17,910
You don't have to do that but that's common.

43
00:02:18,260 --> 00:02:21,410
So, one thing to remember about

44
00:02:21,410 --> 00:02:26,270
these directory hierarchy is that it's recommended but it's not enforced.

45
00:02:26,270 --> 00:02:29,210
So, this idea of having the source subdirectory,

46
00:02:29,210 --> 00:02:33,205
the bin subdirectory, and the package subdirectory, that's not enforced.

47
00:02:33,205 --> 00:02:36,460
So, for instance, you can have an executable in the source directory if you want.

48
00:02:36,460 --> 00:02:39,990
It is not neat and it's harder for people to share, but it's going to run.

49
00:02:39,990 --> 00:02:43,195
You can compile it and put it anywhere you want and run the executable.

50
00:02:43,195 --> 00:02:45,140
So, it's not enforced is

51
00:02:45,140 --> 00:02:49,110
just a recommendation to make it easy to share with other people.

52
00:02:49,110 --> 00:02:51,200
So, the workspace directory,

53
00:02:51,200 --> 00:02:53,220
you do have this one workspace directory though,

54
00:02:53,220 --> 00:02:57,195
and this workspace directory is defined by the GOPATH environment variable.

55
00:02:57,195 --> 00:03:00,235
Now, the GOPATH environment variable depends on,

56
00:03:00,235 --> 00:03:04,840
how you set environment variables is going to depend on your operating system.

57
00:03:04,840 --> 00:03:08,310
Normally, what happens is like on my Windows machine,

58
00:03:08,310 --> 00:03:11,685
but the Chaperone, Linux and OS X machine two,

59
00:03:11,685 --> 00:03:14,830
is that the GOPATH directory is set for you

60
00:03:14,830 --> 00:03:18,860
automatically during the installation process.

61
00:03:18,860 --> 00:03:20,640
So, that wizard, the install wizard,

62
00:03:20,640 --> 00:03:24,120
it should define the GOPATH environment variable.

63
00:03:24,120 --> 00:03:26,565
Certainly, on a Windows machine,

64
00:03:26,565 --> 00:03:28,555
the default directory where it sticks it,

65
00:03:28,555 --> 00:03:31,670
where it puts it is C:\Users\yourname.

66
00:03:31,670 --> 00:03:35,330
So, for me, \user\Ian\go.

67
00:03:35,330 --> 00:03:39,820
It sets that as your workspace directory.

68
00:03:39,820 --> 00:03:43,465
Now, I noticed that when I installed everything,

69
00:03:43,465 --> 00:03:45,835
that was my GOPATH.

70
00:03:45,835 --> 00:03:49,310
What you see up there \Users\Ian\go.

71
00:03:49,310 --> 00:03:51,870
But it actually didn't create a Go directory.

72
00:03:51,870 --> 00:03:53,495
So, there was \Users\Ian.

73
00:03:53,495 --> 00:03:56,100
I had to create the directory myself, which is fine.

74
00:03:56,100 --> 00:04:00,545
But I had to make that directory and put my stuff in there.

75
00:04:00,545 --> 00:04:03,245
But understand that that's the default workspace.

76
00:04:03,245 --> 00:04:06,580
You can change that and you can go to your GOPATH environment

77
00:04:06,580 --> 00:04:10,190
variable and change your environment variable in your operating system if you want to,

78
00:04:10,190 --> 00:04:13,705
but for now I'm just assuming that we're using the default Gopath.

79
00:04:13,705 --> 00:04:17,620
So, with Go tools, I'll assume that the code is inside the GOPATH somewhere.

80
00:04:17,620 --> 00:04:22,420
Now, there is this other concept of packages.

81
00:04:22,420 --> 00:04:25,265
Your code is organized into packages.

82
00:04:25,265 --> 00:04:28,730
A package is a group of related source code files.

83
00:04:28,730 --> 00:04:32,145
Each package can be imported by other packages.

84
00:04:32,145 --> 00:04:34,810
So, this is the use for this.

85
00:04:34,810 --> 00:04:37,280
The main use for this is when you're working with other people,

86
00:04:37,280 --> 00:04:39,295
other groups of people in other places,

87
00:04:39,295 --> 00:04:41,350
you write all your code in one package,

88
00:04:41,350 --> 00:04:43,130
they write all their code in another package,

89
00:04:43,130 --> 00:04:45,360
and then if you need to use their code,

90
00:04:45,360 --> 00:04:46,590
you can use their code,

91
00:04:46,590 --> 00:04:48,300
you can import their package.

92
00:04:48,300 --> 00:04:52,920
So, it's good for software reuse that's the main goal.

93
00:04:52,920 --> 00:04:55,740
The first line of the file names the package.

94
00:04:55,740 --> 00:04:58,130
So, what I'm showing here in the picture,

95
00:04:58,130 --> 00:04:59,840
you can see these two pink boxes up here.

96
00:04:59,840 --> 00:05:03,020
These are two packages that are defined and you can see the first line of,

97
00:05:03,020 --> 00:05:04,350
so those are two different files,

98
00:05:04,350 --> 00:05:06,260
different source code files.

99
00:05:06,260 --> 00:05:10,790
You can see the package names are listed at the top, package package.

100
00:05:10,790 --> 00:05:15,555
There's a bunch of code in there and they're associated with that package name.

101
00:05:15,555 --> 00:05:20,000
Then in blue, I have some other piece of code in

102
00:05:20,000 --> 00:05:24,620
a different source file and it needs to use the packages from the other two people.

103
00:05:24,620 --> 00:05:27,860
So, I have an input statement at the top of

104
00:05:27,860 --> 00:05:33,710
my blue file and I give the package names that I want to import.

105
00:05:33,710 --> 00:05:37,600
So, I can use these other two packages in my code if I want to.

106
00:05:37,600 --> 00:05:40,750
So, this is how packages get connected to each other.

107
00:05:40,750 --> 00:05:44,120
It's very convenient if you're working with somebody remotely or

108
00:05:44,120 --> 00:05:48,370
somewhere else that you can clean separation of the code.

109
00:05:48,370 --> 00:05:52,950
Now, there always has to be one package called main,

110
00:05:52,950 --> 00:05:55,100
and that's where execution starts.

111
00:05:55,100 --> 00:05:57,860
So, there's got to be one package called main and you'll note

112
00:05:57,860 --> 00:06:00,820
that in the code that we're working on in this course,

113
00:06:00,820 --> 00:06:03,740
we just have one package and it is called main.

114
00:06:03,740 --> 00:06:06,715
Because we're not making such big code,

115
00:06:06,715 --> 00:06:10,330
we have different groups of people working together with different packages right now.

116
00:06:10,330 --> 00:06:13,030
We're just writing one package called main.

117
00:06:13,030 --> 00:06:15,185
But there must be one package called main

118
00:06:15,185 --> 00:06:18,120
and when you build the main package when you compile it,

119
00:06:18,120 --> 00:06:20,040
it makes an executable one.

120
00:06:20,040 --> 00:06:24,285
So, note that when you build another package on the non main packages,

121
00:06:24,285 --> 00:06:26,680
then it doesn't make it executable for those,

122
00:06:26,680 --> 00:06:31,200
or not a running executable because it's not going to be executed directly.

123
00:06:31,200 --> 00:06:33,520
It will be incorporated into some other package.

124
00:06:33,520 --> 00:06:34,620
But the main package,

125
00:06:34,620 --> 00:06:35,750
that's what's going to be run,

126
00:06:35,750 --> 00:06:37,645
so when you compile that,

127
00:06:37,645 --> 00:06:41,705
when you build it, build\compile you get an executable file.

128
00:06:41,705 --> 00:06:46,190
So, the main package needs to have a function called main.

129
00:06:46,190 --> 00:06:48,620
Main is where code execution starts.

130
00:06:48,620 --> 00:06:51,485
So, you can see the example code right here.

131
00:06:51,485 --> 00:06:53,480
It's just printing, "Hello world".

132
00:06:53,480 --> 00:06:56,570
If we say package main, import format,

133
00:06:56,570 --> 00:07:00,980
so that import right there is importing a package.

134
00:07:00,980 --> 00:07:03,280
Format it's not a package that I wrote.

135
00:07:03,280 --> 00:07:06,470
Format is one of the packages that comes with the Go tool.

136
00:07:06,470 --> 00:07:10,650
So, when you download the Go tools you get all these standard packages including format.

137
00:07:10,650 --> 00:07:13,530
The format package has a lot of functions in it.

138
00:07:13,530 --> 00:07:14,870
We'll talk more about it later.

139
00:07:14,870 --> 00:07:17,630
But one of the functions that it has this print statement,

140
00:07:17,630 --> 00:07:20,325
so Printf is included in the format package,

141
00:07:20,325 --> 00:07:22,180
so we have to import that package,

142
00:07:22,180 --> 00:07:25,310
and then we make our function main and in there it just

143
00:07:25,310 --> 00:07:29,520
says fmt.Printf hello world. So, pretty straightforward.