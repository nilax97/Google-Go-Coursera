1
00:00:09,080 --> 00:00:14,680
So, we're going to continue talking about the basic data types,

2
00:00:14,680 --> 00:00:19,170
but a couple of things I want to hit on are comments and print statements.

3
00:00:19,170 --> 00:00:23,995
So, it's interesting when teaching a class about programming language,

4
00:00:23,995 --> 00:00:27,590
there are some things that you have to teach it linearly, right?

5
00:00:27,590 --> 00:00:28,850
One thing at a time.

6
00:00:28,850 --> 00:00:33,860
But some things are basic concepts that I have to use very early on.

7
00:00:33,860 --> 00:00:35,940
So, I'm going now to sequence a little bit,

8
00:00:35,940 --> 00:00:39,730
but these are comments and print statements I use all the time,

9
00:00:39,730 --> 00:00:41,345
I've even used them already.

10
00:00:41,345 --> 00:00:45,690
So, I need to define those then I'll keep going with the variables.

11
00:00:45,690 --> 00:00:48,045
So, comments.

12
00:00:48,045 --> 00:00:50,280
Comments this is pretty straight forward,

13
00:00:50,280 --> 00:00:51,915
these are basically C like comments,

14
00:00:51,915 --> 00:00:53,715
they look like this the same as in C.

15
00:00:53,715 --> 00:00:57,220
Single-line comments are just a double slash or slash-slash.

16
00:00:57,220 --> 00:01:00,905
Everything to the right of the slash-slash on the line, that's a comment.

17
00:01:00,905 --> 00:01:03,380
Which means it's completely ignored by the compiler.

18
00:01:03,380 --> 00:01:06,955
It's only text for the programmer to look at,

19
00:01:06,955 --> 00:01:09,635
to understand, to help with the understandability of the code.

20
00:01:09,635 --> 00:01:11,150
Which is a useful thing.

21
00:01:11,150 --> 00:01:14,900
Comments are excellent things when used appropriately.

22
00:01:14,900 --> 00:01:16,850
But you can see here,

23
00:01:16,850 --> 00:01:18,095
you can see slash-slash,

24
00:01:18,095 --> 00:01:20,780
this is a comment and then everything to the right of it,

25
00:01:20,780 --> 00:01:22,415
which is everything on that line is going to be

26
00:01:22,415 --> 00:01:24,560
comet stuff I've highlighted in red there.

27
00:01:24,560 --> 00:01:27,829
Then on the next line, I declare a variable var x-int,

28
00:01:27,829 --> 00:01:30,120
and I say slash-slash another comment.

29
00:01:30,120 --> 00:01:32,170
In that case, the slash-slash,

30
00:01:32,170 --> 00:01:35,210
everything to the right of the slash slash on that line is comment,

31
00:01:35,210 --> 00:01:37,375
but the stuff on the left is still valid code.

32
00:01:37,375 --> 00:01:39,190
So, the stuff on the left gets compiled,

33
00:01:39,190 --> 00:01:41,320
the stuff on the right is ignored by the compiler.

34
00:01:41,320 --> 00:01:43,870
Now, in addition to the single-line comments,

35
00:01:43,870 --> 00:01:45,125
you got blocked comments,

36
00:01:45,125 --> 00:01:47,900
and those are marked off with the slash-star and the star-slash.

37
00:01:47,900 --> 00:01:50,900
Slash-star begins that star slash ends it.

38
00:01:50,900 --> 00:01:54,240
Everything between the slash-star and star-slash is a comment.

39
00:01:54,240 --> 00:01:55,935
So, in this case it's just two lines,

40
00:01:55,935 --> 00:01:57,770
but I can have any number of lines of code.

41
00:01:57,770 --> 00:01:59,840
If I wanted to have a lines of text whatever,

42
00:01:59,840 --> 00:02:01,520
I can have any number of lines of text describing

43
00:02:01,520 --> 00:02:04,190
a function or something like that mark that,

44
00:02:04,190 --> 00:02:07,380
put that as a block before the function if I wanted to.

45
00:02:07,380 --> 00:02:10,520
So, those are comments. Now, an additional thing that I've

46
00:02:10,520 --> 00:02:14,265
already been using print statements just because they're so useful.

47
00:02:14,265 --> 00:02:19,590
Printing, it's done using the format package FMT package.

48
00:02:19,590 --> 00:02:23,690
So, you have to import the format package import format at the top of your program.

49
00:02:23,690 --> 00:02:28,890
Then printf is the first standard print function you use.

50
00:02:28,890 --> 00:02:33,045
A format.print it prints a string.

51
00:02:33,045 --> 00:02:36,120
So, it passes a string as an argument to printf.

52
00:02:36,120 --> 00:02:38,685
So, format that printf quote tie.

53
00:02:38,685 --> 00:02:41,215
A string is delimited by these double-quotes,

54
00:02:41,215 --> 00:02:44,860
and we'll talk more about strings but the stubble ways just double-quotes.

55
00:02:44,860 --> 00:02:48,290
Or I can say x equals x colon equals Joe,

56
00:02:48,290 --> 00:02:52,160
and then format our printf i plus x,

57
00:02:52,160 --> 00:02:54,280
so plus the concatenation operator,

58
00:02:54,280 --> 00:02:58,085
that concatenates the Hi and the next string x.

59
00:02:58,085 --> 00:03:02,425
Right. Which is a word Joe. So, that would print out Hi Joe with space in between.

60
00:03:02,425 --> 00:03:05,945
Now, we also we're going to use format strings.

61
00:03:05,945 --> 00:03:11,975
Format strings are strings that are used for formatting the output, to make it look nice.

62
00:03:11,975 --> 00:03:15,900
Basically, all format strings are there strings in double-quotes,

63
00:03:15,900 --> 00:03:17,230
but inside the string,

64
00:03:17,230 --> 00:03:19,290
use what are called conversion characters.

65
00:03:19,290 --> 00:03:21,070
So, in this language they're,

66
00:03:21,070 --> 00:03:23,000
in Go they use percent.

67
00:03:23,000 --> 00:03:24,520
Percent, and then some of the characters.

68
00:03:24,520 --> 00:03:27,995
So, for instance, you look at the example format printf says hi,

69
00:03:27,995 --> 00:03:33,450
and then percent S. Percent S is a conversion character for a string.

70
00:03:33,450 --> 00:03:36,440
So, what's going to happen is wherever you see the convergent character,

71
00:03:36,440 --> 00:03:38,900
that character will be substituted by

72
00:03:38,900 --> 00:03:42,780
some variable in this case this is percent S that means a string.

73
00:03:42,780 --> 00:03:44,365
So, it expects a string.

74
00:03:44,365 --> 00:03:46,310
So, if we look at the arguments to printf,

75
00:03:46,310 --> 00:03:48,200
the first argument is the Hi,

76
00:03:48,200 --> 00:03:50,630
is the string hi percent s,

77
00:03:50,630 --> 00:03:51,960
that's a format string.

78
00:03:51,960 --> 00:03:54,090
The next argument, is the x.

79
00:03:54,090 --> 00:03:56,240
That x is going to be some string that is going to be

80
00:03:56,240 --> 00:04:00,120
substituted in for the percent s. So,

81
00:04:00,120 --> 00:04:02,285
if x is the word Joe,

82
00:04:02,285 --> 00:04:04,310
then when I do this print statement,

83
00:04:04,310 --> 00:04:06,260
it's going to say Hi Joe,

84
00:04:06,260 --> 00:04:09,630
because Joe will be substituted in for the percent s. So,

85
00:04:09,630 --> 00:04:11,130
this is a commonly used,

86
00:04:11,130 --> 00:04:15,780
these format strings are commonly used to make the format look nice when you're printing.

87
00:04:16,220 --> 00:04:20,290
So, besides the comments and the printing,

88
00:04:20,290 --> 00:04:23,775
let's start talking a little bit about integers and the nature of integers.

89
00:04:23,775 --> 00:04:26,780
So, first there's a generic int declaration we've

90
00:04:26,780 --> 00:04:30,180
already declared some integers are var x int.

91
00:04:30,180 --> 00:04:33,220
Now, there are different varieties of integers.

92
00:04:33,220 --> 00:04:36,150
Generally, for the most part we're not going to care,

93
00:04:36,150 --> 00:04:37,715
we just say var x int,

94
00:04:37,715 --> 00:04:40,430
and leave it to the compiler to figure out what type of integer,

95
00:04:40,430 --> 00:04:43,150
what length of integer it to use most of the time.

96
00:04:43,150 --> 00:04:45,875
But you can have different lengths of integers too.

97
00:04:45,875 --> 00:04:47,555
So, for instance here,

98
00:04:47,555 --> 00:04:50,550
you got int8, int16, and 32,

99
00:04:50,550 --> 00:04:54,495
and 64 and those numbers

100
00:04:54,495 --> 00:04:57,430
are the number of bits that are used to represent the integer and memory.

101
00:04:57,430 --> 00:05:01,150
So, eight-bit integers, 16-bit 32-bit, 64-bit.

102
00:05:01,150 --> 00:05:03,510
Then you want unsigned integers.

103
00:05:03,510 --> 00:05:04,630
So, and also eight-bit,

104
00:05:04,630 --> 00:05:06,370
16 bit, 32, 64.

105
00:05:06,370 --> 00:05:09,975
That is we aren't unsigned.

106
00:05:09,975 --> 00:05:13,315
So, that means that they can get larger.

107
00:05:13,315 --> 00:05:15,710
Meaning, there's a normally and we're

108
00:05:15,710 --> 00:05:18,000
using two's complement arithmetic inside our machine.

109
00:05:18,000 --> 00:05:20,730
So, the most significant bit is the signed bit.

110
00:05:20,730 --> 00:05:22,555
In an unsigned integer,

111
00:05:22,555 --> 00:05:24,700
that most significant bit is not used for the sign,

112
00:05:24,700 --> 00:05:26,405
it's used for magnitude representation.

113
00:05:26,405 --> 00:05:30,170
So, the magnitude, the absolute value of the unsigned integer can get

114
00:05:30,170 --> 00:05:32,180
bigger just because you have

115
00:05:32,180 --> 00:05:35,560
that extra bit that would have been used for signing and irregular integer,

116
00:05:35,560 --> 00:05:37,245
you can use it for magnitude.

117
00:05:37,245 --> 00:05:40,580
So, the difference between these different lengths of

118
00:05:40,580 --> 00:05:44,715
integers is just how big do we need the integer to be.

119
00:05:44,715 --> 00:05:46,790
So, an eight bit integer let's say,

120
00:05:46,790 --> 00:05:49,530
that can only represent x,

121
00:05:49,530 --> 00:05:51,860
let's say it's an 8-bit onside the sound side for a second,

122
00:05:51,860 --> 00:05:54,450
that can represent zero to 255,

123
00:05:54,450 --> 00:05:57,220
because that's the biggest number you can represent with eight bits.

124
00:05:57,220 --> 00:06:00,650
But a 16-bit integer can go from zero,

125
00:06:00,650 --> 00:06:04,700
like an unsigned integer can go from zero to 64K,

126
00:06:04,700 --> 00:06:07,930
which is about 65,000 and there about.

127
00:06:07,930 --> 00:06:09,705
So, it's much bigger.

128
00:06:09,705 --> 00:06:12,390
So, the more bits you use,

129
00:06:12,390 --> 00:06:15,435
the bigger the number representation can be.

130
00:06:15,435 --> 00:06:17,080
The most common thing to do,

131
00:06:17,080 --> 00:06:20,220
is just to declare it as an int and leave it to the compiler figure out,

132
00:06:20,220 --> 00:06:23,270
but if you happen to know the magnitude of the numbers that you want,

133
00:06:23,270 --> 00:06:27,320
you can control that by specifying what size integer you want.

134
00:06:27,320 --> 00:06:30,835
Now, integers also have a set of operators,

135
00:06:30,835 --> 00:06:33,100
binary operators I'm showing right here.

136
00:06:33,100 --> 00:06:35,970
They're also unitary operators but these are the binary ones.

137
00:06:35,970 --> 00:06:37,495
These you've seen these in every language,

138
00:06:37,495 --> 00:06:39,955
plus, minus, times, all the arithmetic,

139
00:06:39,955 --> 00:06:43,440
shift, modulus, comparison operator,

140
00:06:43,440 --> 00:06:46,105
so equal-equal is a comparison, equality comparison.

141
00:06:46,105 --> 00:06:49,280
Part ahead exclamation equal, that's not equal.

142
00:06:49,280 --> 00:06:51,035
Greater than, less than, so forth,

143
00:06:51,035 --> 00:06:54,560
there are Boolean operators, so and or,

144
00:06:54,560 --> 00:06:56,090
and then bitwise operators,

145
00:06:56,090 --> 00:07:01,165
where it does Boolean operations per bit inside wherever the integer is.

146
00:07:01,165 --> 00:07:02,500
So, you can see those too,

147
00:07:02,500 --> 00:07:06,160
but these are common to basically to all, not all,

148
00:07:06,160 --> 00:07:08,720
but all standard languages have the same set

149
00:07:08,720 --> 00:07:12,270
of operators that you can operate on interests with.