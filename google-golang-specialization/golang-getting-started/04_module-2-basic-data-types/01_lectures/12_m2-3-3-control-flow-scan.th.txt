เรามาต่อกันที่การควบคุมทิศทางของการไหลของโปรแกรมกันนะครับ ยกตัวอย่างเช่นสวิทช์ปิดเปิด แต่เรากำลังพูดถึงสวิทช์ปิดเปิดที่ไม่มีป้ายบอก ซึ่งต่างออกไปจากสวิทช์ปิดเปิดธรรมดา โดยปกติ สวิทช์จะมีป้ายหรือเครื่องหมายบอก เช่น สวิทช์ X และเราเรียก X ว่าป้าย และค่า X คือค่าตัวแปรที่เรากำลังจะนำไป เปรียบเทียบกับค่าคงที่ ที่จะเปลี่ยนไปทันทีเมื่อเข้าเงื่อนไข เช่นยกตัวอย่าง ค่าคงที่ 1, 2 หรือ 3 X จะถูกนำมาเปรียบเทียบกับค่าคงที่เหล่านั้น ว่าจะได้ค่าเป็น 1, 2 หรือ 3 แต่บางครั้ง มันอาจไม่เป็นอย่างที่คุณต้องการ บางครั้ง เราอาจจะเจอสวิทช์ที่ไม่มีป้ายบอกว่าเป็นสวิทช์ของค่าอะไร และเมื่อเราทำแบบนั้น สิ่งจะเกิดขึ้นเมื่อสวิทช์ X ถูกกด คือ ชุดคำสั่งใดที่เป็นจริง จะทำงาน และที่ผมกำลังจะบอกคือ เมื่อเราไม่มีป้ายบอกติดสวิทช์ ทางเลือกที่จะเป็นไปได้ทั้งหมดก็จะเปิดกว้าง โดยแทนที่เราจะกำหนดค่าตัวแปรให้กับแต่ละทางเลือก มันจะมีชุดคำสั่งที่ทำหน้าที่ตรวจสอบค่าตรรกะ ว่าเป็นจริงหรือเท็จ และถ้าค่าตรรกะที่ได้ เป็นจริง และในกรณีที่ทางเลือกไหนถูกสั่งให้ทำงาน จะเป็นทางเลือกแรกแรกที่พบว่ามีค่าตรรกะเป็นจริง ถูกสั่งให้ทำงาน ดังนั้น เรามาดูตัวอย่างกัน ตัวอย่างเรามีสวิทช์หนึ่งอัน ที่ไม่มีป้ายบอกว่าเป็นสวิทช์ของค่าอะไร เรามีแค่ทางเลือกหลาย ๆ ทางเลือก มีสองทางเลือก และหนึ่งค่าเริ่มต้น ทางเลือกแรก ถ้า X มากกว่า 1 ทางเลือกที่สอง คือ X น้อยกว่า -1 หากไม่ใช่ ก็ให้ใช้ค่าเริ่มต้น ในสถานะการณ์แบบนี้ เมื่อไม่มีป้ายบอกว่าเป็นสวิทช์ของค่าอะไร มันจะดู และประเมินแต่ละทางเลือก อ่านและตีความเงื่อนไขของทางเลือก ถ้าเป็นจริง ทางเลือกนั้นก็จะทำงาน และถือว่าจบการทำงานของสวิทช์ แต่ถ้าเป็นเท็จ มันก็จะข้ามไปตรวจสอบทางเลือดถัดไป และทำไปเรื่อย ๆ จนกระทั่งจนครบทุกทางเลือก และถ้าไม่มีทางเลือกไหนเป็นจริงเลย ค่าเริ่มต้นก็จะถูกนำมาใช้ ถ้าคุณใส่ค่าเริ่มต้นให้มันด้วย และนั่นคือ สวิทช์ที่ไม่มีป้่ายบอก และคุณก็สามารถใช้มันได้เช่นกัน แทนที่เราจะใช้ชุดคำสั่ง If..else ซ้ำ ๆ กันหลาย ๆ ครั้ง คุณควรใช้คำสั่ง switch แทน, ซึ่งมันก็คือสวิทช์ไร้ป้าย คำสั่ง Break และ Continue ถูกนำมาใช้ในการควบคุมทิศทางการไหลเช่นกัน บางทีเราเจอชุดคำสั่งที่เขียนได้แย่มาก แต่มันก็ถูกใช้งานและใช้งานได้ เราจะใช้ Break และ Continue สำหรับลูป การใช้ Break คือการออกจากลูป ยกตัวอย่างเมื่อคุณอยู่ในลูป ในกรณีนี้ เราจะได้การทำงานทั้งหมดแค่ 4 ลูป โดยค่า i เริ่มต้นเท่ากับ 0 เมื่อค่า i น้อยกว่า 10 ให้วนลูป และ i เพิ่มขึ้นทีละ 1 ซึ่งนี่คือสิ่งที่จะเกิดขึ้นนี้ เราจะสามารถจินตนาการตามได้ว่าควรจะเกิดขึ้นซ้ำ ๆ 10 ครั้ง แต่สังเกตุภายในลูป ได้กล่าวถึง X ไว้ว่า ถ้า X เท่ากับ 5 ให้หยุด และเมื่อใดก็ตาม ถ้ามันเข้าเงื่อนไขการหยุด ซึ่งในกรณี ใช่ คือมันหยุด เมื่อมันหยุด มันจะออกจากลูปไปเลยทันที ซึ่งเจ้าลูปนี้ทำงานเมื่อ i เท่ากับ 0 1, 2, 3, 4 และ 5 เท่านั้น มันวนเข้าไปในลูป และหยุดในลูปรอบที่ 5 ในขณะที่กำลังอยู่ในลูป มันจะทำงานไม่ครบลูป ดังนั้น คำสั่ง break มันจะกระโดดออกมาจากลูปทันทีโดยไม่สนใจคำสั่งที่เหลือ คราวนี้เรามาดูในอีกด้านนึงกันบ้าง มันใช้คำสั่งวนลูปเหมือนกัน แต่มันไม่ได้ออกจากลูป มันแค่ข้ามการทำงานของลูปในรอบนั้น ๆ ไป เรามาดูตัวอย่างการใช้งานคำสั่ง continue กัน ชุดคำสั่งเดิม แต่เปลี่ยนจากการใช้ break มาเป็นใช้ continue แทน ถ้า i มีค่าเท่า 5 ให้เรียกใช้คำสั่ง continue สำหรับในกรณีนี้ ถ้าไม่มีคำสั่ง if และ continue มันจะวนลูปจนครบ 10 ครั้ง เพราะค่า i เริ่มต้นจาก 0 และเพิ่มขึ้นเรื่อย ๆ ตามเงื่อนไข ตราบเท่าที่ i ยังน้อยกว่า 10 ซึ่งมันจะเป็นการวนลูป 10 ครั้งนั่นเอง แต่สำหรับลูปนี้ มันกล่าวว่า ถ้า i มีค่าเท่ากับ 5 ให้เรียกคำสั่ง continue ซึ่งในลูปรอบนั้น i มีค่าเท่ากับ 5 จริง มันจะกระโดดข้ามโค๊ดส่วนที่เหลือและจบรอบลูปรอบนั้นไปเลย ซึ่งเอาล่ะ ถึงแม้ว่าลูปจะทำงาน แต่มันไม่ได้ทำงานเท่าจำนวนที่เราต้องการ เพราะลูปมันจะข้ามไป 1 รอบ มาที่คำสั่ง scan เป็นคำสั่งที่อ่านการป้อนค่าจากผู้ใช้งาน ซึ่งมันไม่ใช้คำสั่งในการควบคุมทิศทางการไหลของโปรแกรมหรอกนะ แต่เราจำเป็นต้องใช้มัน เพราะว่า เราต้องอ่านค่าบางอย่างจากผู้ใช้งาน เพื่อใช้ในโค๊ดตัวอย่างที่คุณเขียนขึ้นมา และทำอะไรบางอย่างง่าย ๆ กับมัน เช่นคุณต้องการอ่านค่าจากผู้ใช้งาน ผ่านการพิมพ์ด้วยคีย์บอร์ด ซึ่งมันไม่ใช่คำสั่งในการจัดรูปแบบ สิ่งทีคำสั่ง scan ทำ คือการรับค่า และส่งไปยังตัวแปรชนิด pointer ซึ่งสิ่งที่คุณทำ ก็คือให้ตัวแปรนี้ ชี้ไปยังค่าใด ๆ ก็ตามที่ผู้ใช้จะป้อนเข้ามา เช่น ถ้าผู้ใช้กำลังจะป้อนเลขจำนวนเต็มเข้ามา คุณก็จะได้รับค่าเลขจำนวนเต็มนั้น ที่ถูกชี้โดย pointer ซึ่งส่งให้กังฟังก์ชั่น scan เมื่อคุณเรียกใช้คำสั่ง scan มันจะไปเรียกใช้ฟังก์ชั่น ซึ่งจะทำให้โปรแกรมหยุด และรอจนกระทั่งผู้ใช้พิมพ์บางอย่างเข้ามา แล้วกดปุ่ม Enter และเมื่อกดปุ่ม Enter ฟังก์ชั่น scan ก็จะเอาค่าอะไรก็ตามที่พิมพ์เข้ามา ส่งไปยัง pointer ที่กำลังชี้อยู่ จากนั้นก็เอาค่าจากที่พิมพ์เข้ามาส่งต่อให้ ซึ่งในที่นี้คือค่าเลขจำนวนเต็ม ถ้าเรา pointer ชี้ไปที่ข้อมูลประเภทจำนวนเต็ม มันก็จะได้ค่าเป็นเลขจำนวนเต็ม เปลี่ยนเป็นข้อมูลประเภทจำนวนเต็ม แล้วชี้ แล้วเอาค่าจำนวนเต็มนั้นไปใส่ และค่าที่ได้ คือค่าของตัวเลข ที่ได้จากการใช้คำสั่ง scan โดยมันส่งข้อมูลออกมา 2 อย่าง อย่างแรกคือ จำนวนชิ้นของค่าที่พิมพ์เข้ามา ซึ่งถ้ามีการป้อนค่า space หรือที่ว่างเข้ามา มันก็จะส่งรายงานความผิดพลาด อย่างที่สองที่มันส่งออกมา คือ ข้อความแจ้งความผิดพลาด ถ้าหากมีความผิดพลาดใด ๆ มันจะส่งค่าออกมา ที่ไม่ใช่ nil แต่ถ้าไม่มีข้อผิดพลาด มันจะส่งค่า nil ออกมาแทน ถ้าในกรณีที่มันส่งค่า error หรือค่ารหัสความผิดพลาดออกมา เราต้องตรวจสอบ เราลองไปดูโค๊ดตัวอย่างกัน สมมุติว่า ถ้าเราสร้างตัวแปร ชื่อ appleNum เป็นชนิดเลขจำนวนเต็ม และเราต้องการแสดงค่าจำนวนผลแอปเปิ้ลอกมา คำถามที่จะถามผู้ใช้งานคือ มีแอปเปิ้ลจำนวนกี่ลูก ซึ่งเราคิดหวังว่าผู้ใช้จะป้อนค่าเลขจำนวนเต็มเข้ามา สมมุติว่าเป็น 5 ในบรรทัดต่อมา มีการเรียกใช้ฟังก์ชั่น scan ซึ่งโปรแกรมจะหยุดรอ ค้างอยู่ตรงนั้นจนกว่าผู้ใช้จะป้อนบางอย่างเข้ามาและกดปุ่ม Enter ซึ่งเราสมมุติว่าป้อนเลข 5 เข้ามาและกดปุ่ม Enter ให้สังเกตุว่าค่าที่รับมาจากคำสั่ง scan จะถูกส่งต่อไปยังตัวแปร &appleNum ซึ่งหมายถึงที่อยู่ของตัวแปร appleNum ดังนั้น เมื่อป้อนค่า 5 เข้ามาและกด Enter ฟังก์ชั่น scan ก็จะไปเอาค่า 5 มาเก็บไว้ และส่งต่อไปให้กับตัวแปร appleNum ส่วนบรรทัดถัดมา เราเรียกใช้คำสั่ง printf appleNum มันจะแสดงค่า 5 หรือค่าใด ๆ ก็ตามที่คีย์เข้ามา ออกมา