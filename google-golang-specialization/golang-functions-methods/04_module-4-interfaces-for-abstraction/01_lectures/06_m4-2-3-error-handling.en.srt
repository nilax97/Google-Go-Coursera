1
00:00:00,130 --> 00:00:05,010
Module 4, Interfaces for Abstraction,
Topic 2.3, Error Handling.

2
00:00:05,010 --> 00:00:09,170
So I just want to show a common
use of interfaces in Go.

3
00:00:10,260 --> 00:00:11,630
The Error Interface.

4
00:00:11,630 --> 00:00:16,640
So there are a lot of different Go
functions that are built into packages,

5
00:00:16,640 --> 00:00:18,590
which return errors.

6
00:00:18,590 --> 00:00:21,430
And when I say return errors,
what they do is they return whatever

7
00:00:21,430 --> 00:00:26,170
they're supposed to return, and then
their second return value is an error.

8
00:00:26,170 --> 00:00:27,950
An error interface.

9
00:00:27,950 --> 00:00:30,820
So and we see it defined over here.

10
00:00:30,820 --> 00:00:35,000
The error interface just is any type
that satisfies this interface, and

11
00:00:35,000 --> 00:00:38,790
error interface just specifies that you
have to have a method called, error, which

12
00:00:38,790 --> 00:00:44,470
prints the error message essentially which
prints something, some text that's useful.

13
00:00:44,470 --> 00:00:48,887
So under correct operation,
the error return might be nil,

14
00:00:48,887 --> 00:00:52,621
so for instance, let's say,
I want to open a file.

15
00:00:52,621 --> 00:00:55,679
If it opens the file correctly,
it'll return nil for the error, and

16
00:00:55,679 --> 00:00:56,990
there's no problem.

17
00:00:56,990 --> 00:01:01,720
But if the error actually has a value,
then you'll probably print the error,

18
00:01:01,720 --> 00:01:06,170
and it'll call its error method,
which will successfully print the error.

19
00:01:06,170 --> 00:01:09,170
So show you an example of that.

20
00:01:09,170 --> 00:01:13,450
So basically the idea is, when you,
this happens, there a lot of different Go

21
00:01:13,450 --> 00:01:18,670
language function like this, which return
error as the second argument, okay?

22
00:01:18,670 --> 00:01:23,162
And so, when that happens, you should
check that error, after the call, and

23
00:01:23,162 --> 00:01:24,820
handle it if you need to.

24
00:01:24,820 --> 00:01:28,760
So you can see on the top line,
we're opening a file.

25
00:01:28,760 --> 00:01:34,000
So os.open, open the file by that name,
and it returns two things.

26
00:01:34,000 --> 00:01:39,590
One is the file F, and the second
thing is an error, if an error exist.

27
00:01:39,590 --> 00:01:43,470
So then, right after that, for
safety's sake, you should check the error.

28
00:01:43,470 --> 00:01:48,100
So if error not equal to nil, so if it's
equal to nil, you're fine, you go on.

29
00:01:48,100 --> 00:01:50,890
If it's not equal to nil,
then, do a print that sort of

30
00:01:50,890 --> 00:01:54,020
the most obvious thing to do to handle
the error, is just to print it.

31
00:01:54,020 --> 00:01:56,690
So you println(err) and return.

32
00:01:57,720 --> 00:02:00,680
So printing the error, the format package,

33
00:02:00,680 --> 00:02:04,630
the fmt package,
which println is a part of.

34
00:02:04,630 --> 00:02:10,490
That package will call the error method
of the error to generate the string,

35
00:02:10,490 --> 00:02:11,450
and print that string.

36
00:02:11,450 --> 00:02:14,800
And so, this is sort of the generic
way of handling errors in Go.

37
00:02:14,800 --> 00:02:16,770
It's a very common way
to handle errors in Go.

38
00:02:18,210 --> 00:02:18,710
Thank you.