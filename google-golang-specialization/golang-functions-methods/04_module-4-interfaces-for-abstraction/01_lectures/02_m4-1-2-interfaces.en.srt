1
00:00:00,060 --> 00:00:05,849
Module 4, Interfaces for
Abstraction, Topic 1.2, Interfaces.

2
00:00:05,849 --> 00:00:11,853
An interface is a concept used in Go and
it helps us get polymorphisms.

3
00:00:11,853 --> 00:00:16,720
So we don't get inheritance, we don't need
inheritance, we don't need overriding.

4
00:00:16,720 --> 00:00:20,145
We can use interfaces to basically
accomplish the same thing.

5
00:00:20,145 --> 00:00:21,872
And I think it's in a better way.

6
00:00:21,872 --> 00:00:22,844
I think it's cleaner.

7
00:00:22,844 --> 00:00:25,376
But this is up to,
this is up for argument, right?

8
00:00:25,376 --> 00:00:28,764
because people who are used to Java,
or something like that,

9
00:00:28,764 --> 00:00:30,397
will like it the other way.

10
00:00:30,397 --> 00:00:34,017
They'll like their inheritance and
want to fight to keep it, but

11
00:00:34,017 --> 00:00:35,835
Go does this in a different way.

12
00:00:35,835 --> 00:00:40,467
So an interface is basically
a set of method signatures.

13
00:00:40,467 --> 00:00:44,319
So by signatures, I mean the name of
the method, the parameters of the method,

14
00:00:44,319 --> 00:00:47,327
and their types, and
their return values, and their types.

15
00:00:47,327 --> 00:00:50,823
So that's all it is,
there's no implementations,

16
00:00:50,823 --> 00:00:53,321
implementation of a method, right?

17
00:00:53,321 --> 00:00:55,954
So it just defines
the signatures to the method.

18
00:00:55,954 --> 00:00:59,514
So it says the methods have to
have this name, these parameters,

19
00:00:59,514 --> 00:01:00,754
these return values.

20
00:01:00,754 --> 00:01:02,045
That's an interface.

21
00:01:02,045 --> 00:01:06,940
So it's not a type or
anything, it's less than that.

22
00:01:06,940 --> 00:01:11,119
It's used to express conceptual
similarity between types.

23
00:01:12,360 --> 00:01:18,146
So what I mean by that is say I've got
an interface called Shape2D, right?

24
00:01:18,146 --> 00:01:22,100
And that's my interface, and it's supposed
to represent two-dimensional shapes.

25
00:01:22,100 --> 00:01:24,106
So all two-dimensional shapes,

26
00:01:24,106 --> 00:01:27,156
I'm going to say they have
to have two methods, okay?

27
00:01:27,156 --> 00:01:29,914
An area method and
a perimeter method, right?

28
00:01:29,914 --> 00:01:32,596
If it's a two-dimensional shape,
you gotta be able to compute the area,

29
00:01:32,596 --> 00:01:34,053
you gotta be able to compute perimeter.

30
00:01:34,053 --> 00:01:36,260
And then I call it
a two-dimensional shape.

31
00:01:36,260 --> 00:01:39,515
So my two-dimensional shape
interface just says look,

32
00:01:39,515 --> 00:01:42,918
gotta have these two methods
with the arguments that I say.

33
00:01:42,918 --> 00:01:44,423
In this case, no arguments, right?

34
00:01:44,423 --> 00:01:49,130
You gotta have these two methods in order
to be considered a two dimensional shape.

35
00:01:49,130 --> 00:01:52,852
But if you have those two methods,
any type that has those two methods,

36
00:01:52,852 --> 00:01:55,408
it can be considered
a two-dimensional shape.

37
00:01:55,408 --> 00:01:57,060
That's what an interface is saying.

38
00:01:57,060 --> 00:02:01,935
So it's saying that they are conceptually
similar, a circle, a square, a rectangle,

39
00:02:01,935 --> 00:02:02,890
a triangle.

40
00:02:02,890 --> 00:02:05,710
You can compute the area of all those and
the perimeter of all those.

41
00:02:05,710 --> 00:02:12,549
So I'm going to call them two-dimensional
shapes So, satisfying interface.

42
00:02:12,549 --> 00:02:16,977
A type satisfies an interface if it
actually defines all the methods specified

43
00:02:16,977 --> 00:02:18,057
in the interface.

44
00:02:18,057 --> 00:02:23,069
So remember that a method in an interface,
an interface doesn't specify.

45
00:02:23,069 --> 00:02:24,372
It doesn't design, give you the method.

46
00:02:24,372 --> 00:02:26,590
It just gives you the signature for
the method.

47
00:02:26,590 --> 00:02:28,419
It doesn't implement the method.

48
00:02:28,419 --> 00:02:32,489
So if a type actually implements all
the methods in the interface with

49
00:02:32,489 --> 00:02:37,401
the same method signatures, so same
arguments, same name, same return values,

50
00:02:37,401 --> 00:02:40,299
then that type is said to
satisfy the interface.

51
00:02:40,299 --> 00:02:44,720
So for instance,
I can have a Shape2D interface.

52
00:02:44,720 --> 00:02:48,376
And I have it two types,
a Rectangle type, a Triangle type.

53
00:02:48,376 --> 00:02:52,129
And if the Rectangle type and
the Triangle type both define an area and

54
00:02:52,129 --> 00:02:56,151
a parameter method, with the appropriate
arguments and return values.

55
00:02:56,151 --> 00:03:00,505
Then you will say Rectangle and Triangle
both satisfy the Shape2D interface.

56
00:03:00,505 --> 00:03:03,632
And so they can be considered
to be two-dimensional shapes.

57
00:03:03,632 --> 00:03:08,883
Now Rectangle and Triangle can have lots
of other methods besides the area and

58
00:03:08,883 --> 00:03:10,347
perimeter, right?

59
00:03:10,347 --> 00:03:11,424
Any number of other methods.

60
00:03:11,424 --> 00:03:14,199
Also, Rectangle and
Triangle can have lots of other data.

61
00:03:14,199 --> 00:03:18,212
Maybe they're structs, and struct types,
and they have x, y, z points.

62
00:03:18,212 --> 00:03:19,584
Who knows what they have, right?

63
00:03:19,584 --> 00:03:20,573
None of that matters.

64
00:03:20,573 --> 00:03:22,737
As long as they have the area and

65
00:03:22,737 --> 00:03:27,662
perimeter that is specified in
the interface, then that's enough.

66
00:03:27,662 --> 00:03:31,314
And they can be considered to
be satisfying the interface and

67
00:03:31,314 --> 00:03:34,043
considered to be two-dimensional shapes.

68
00:03:34,043 --> 00:03:38,594
So what that accomplishes is it
basically accomplishes what you get from

69
00:03:38,594 --> 00:03:41,664
inheritance and
overriding together, right?

70
00:03:41,664 --> 00:03:44,019
So now I got Rectangle and Triangle.

71
00:03:44,019 --> 00:03:48,385
If they're both Shape2D, if they satisfy
that interface, then they both have area,

72
00:03:48,385 --> 00:03:49,746
they both have perimeter.

73
00:03:49,746 --> 00:03:53,250
But their area and perimeter methods can
do completely different things, right?

74
00:03:53,250 --> 00:03:54,928
because when you compute
the area of a rectangle,

75
00:03:54,928 --> 00:03:57,281
it is different than computing
the area of a triangle, right?

76
00:03:57,281 --> 00:04:01,173
So their implementations can be different,
but they have the same name.

77
00:04:01,173 --> 00:04:04,406
And at the high level they form
the same thing, they compute area.

78
00:04:04,406 --> 00:04:09,081
So in this way, we're using interface to
accomplish in Go lang what you would use

79
00:04:09,081 --> 00:04:13,416
inheritance and overriding to accomplish
typically in a thing like JAVA or

80
00:04:13,416 --> 00:04:15,716
some other object oriented language.

81
00:04:15,716 --> 00:04:18,056
So how do you define an interface type?

82
00:04:18,056 --> 00:04:21,144
It's pretty straightforward,
it looks sort of like a struct.

83
00:04:21,144 --> 00:04:26,143
There we got Shape2D, so
I say type Shape2D interface.

84
00:04:26,143 --> 00:04:29,008
Just use the keyword interface
after the name of the interface.

85
00:04:29,008 --> 00:04:34,065
In curly brackets, I start listing
the signatures of the methods.

86
00:04:34,065 --> 00:04:37,882
So in this case is only two method and
two signatures that I need, area and

87
00:04:37,882 --> 00:04:38,580
perimeter.

88
00:04:38,580 --> 00:04:42,858
Both of them area and perimeter take
no arguments and they return a float,

89
00:04:42,858 --> 00:04:43,687
a 64 float.

90
00:04:43,687 --> 00:04:47,233
So that's it,
that's how you define this interface.

91
00:04:47,233 --> 00:04:50,766
I just list all these method signatures
that I want to put in the interface.

92
00:04:50,766 --> 00:04:55,529
Now then, say later on in my
code I defined a type Triangle.

93
00:04:55,529 --> 00:04:56,876
And I don't even say what's in it.

94
00:04:56,876 --> 00:05:00,664
I just said it have an open curly bracket,
close curly bracket, with some dots,

95
00:05:00,664 --> 00:05:04,412
just to say it doesn't matter what data
I'm putting in that Triangle, right?

96
00:05:04,412 --> 00:05:07,141
Maybe that data Triangle, maybe it's
a struct or something like that,

97
00:05:07,141 --> 00:05:07,956
who knows what it is.

98
00:05:07,956 --> 00:05:10,532
It doesn't matter, but whatever it is,

99
00:05:10,532 --> 00:05:14,872
as long as I define a function area
whose receiver type is a Triangle and

100
00:05:14,872 --> 00:05:18,722
a function perimeter whose
receiver type is also a Triangle.

101
00:05:18,722 --> 00:05:23,483
And the area and perimeter also take
no arguments and return float64s,

102
00:05:23,483 --> 00:05:25,187
just like the interface.

103
00:05:25,187 --> 00:05:29,747
Then this type Triangle is said to
satisfy that ShapeID interface,

104
00:05:29,747 --> 00:05:31,907
Shape2D interface, rather.

105
00:05:31,907 --> 00:05:35,015
So and it doesn't matter what
other data is in Triangle,

106
00:05:35,015 --> 00:05:38,201
what other methods are using
Triangle as a received type.

107
00:05:38,201 --> 00:05:42,025
As long as got area and perimeter and
it matches and satisfies the interface.

108
00:05:42,025 --> 00:05:43,852
And one other thing before I go on,

109
00:05:43,852 --> 00:05:47,190
is that you don't have
to state it explicitly.

110
00:05:47,190 --> 00:05:51,220
So in other languages that have
interfaces, you often have

111
00:05:51,220 --> 00:05:56,190
to say explicitly the Triangle satisfies
this interface, the Shape2D interface.

112
00:05:56,190 --> 00:05:57,440
You don't say that in Go.

113
00:05:57,440 --> 00:06:00,756
You just say here's the interface and
here's my type Triangle, and

114
00:06:00,756 --> 00:06:02,311
here the methods for Triangle.

115
00:06:02,311 --> 00:06:05,536
And the compiler figure,
it can do the matching automatically.

116
00:06:05,536 --> 00:06:10,319
So I see you have a area in perimeter, I
will treat you just like I treat anything

117
00:06:10,319 --> 00:06:12,871
that satisfies the Shape2D interface.

118
00:06:12,871 --> 00:06:13,371
Thank you.