1
00:00:00,000 --> 00:00:05,190
Module 3, Object-Orientation in Go,
Topic 1.1, Classes and Encapsulation.

2
00:00:07,118 --> 00:00:11,298
So, classes are part of
object-oriented programming paradigm.

3
00:00:11,298 --> 00:00:16,110
And this class, this whole course is for
intermediate level people, right, so

4
00:00:16,110 --> 00:00:20,099
I'm assuming that people already
have exposure to programming.

5
00:00:20,099 --> 00:00:23,820
And so it is most likely that you
already understand what object oriented

6
00:00:23,820 --> 00:00:27,114
programming is, although I will
sort of redefine it right now,

7
00:00:27,114 --> 00:00:29,318
make sure we have a common understanding.

8
00:00:29,318 --> 00:00:31,581
And there's always this question,

9
00:00:31,581 --> 00:00:34,798
does Golang support object
oriented programming?

10
00:00:34,798 --> 00:00:36,028
I'll say yes it does.

11
00:00:36,028 --> 00:00:39,969
It doesn't have classes exactly,
but it has something equivalent,

12
00:00:39,969 --> 00:00:42,053
it allows most of the same features.

13
00:00:42,053 --> 00:00:46,022
So just to say what a class is though
to start, what a traditional class is,

14
00:00:46,022 --> 00:00:48,668
that you would've seen
in many other languages.

15
00:00:48,668 --> 00:00:51,322
A class is basically
a collection of data fields and

16
00:00:51,322 --> 00:00:54,172
functions that share a well
defined responsibility.

17
00:00:54,172 --> 00:01:00,186
So it's data fields and functions put
together, usually called methods.

18
00:01:00,186 --> 00:01:01,892
You call them methods
when they're in a class.

19
00:01:01,892 --> 00:01:03,670
So data and methods put together.

20
00:01:03,670 --> 00:01:07,035
[COUGH] So as an example,
say we want a point class, right,

21
00:01:07,035 --> 00:01:09,382
that represent some point in 2D space.

22
00:01:09,382 --> 00:01:13,050
So, I'll use a geometry
program I'm making, okay?

23
00:01:13,050 --> 00:01:17,151
So, the data might be the x coordinate and
the y coordinate of the point,

24
00:01:17,151 --> 00:01:20,121
that's data that you would
associate with a point.

25
00:01:20,121 --> 00:01:24,626
The functions, there might be a variety of
functions, but maybe I've got distance to

26
00:01:24,626 --> 00:01:29,315
origin, quadrants, returns the quadrant
that the point's in, AddXO set, AddYO set,

27
00:01:29,315 --> 00:01:32,857
set X, set Y, there are a lot of
functions that I could put in there.

28
00:01:32,857 --> 00:01:35,276
But the point is though, that the data and

29
00:01:35,276 --> 00:01:38,674
the functions are all related
to the same concept, okay?

30
00:01:38,674 --> 00:01:40,759
There is a two-dimensional point and

31
00:01:40,759 --> 00:01:44,738
these functions are all things that
you do to two-dimensional points.

32
00:01:44,738 --> 00:01:47,521
And the data is all the data that's
associated with two-dimensional points.

33
00:01:47,521 --> 00:01:49,204
So, that's what a class is.

34
00:01:49,204 --> 00:01:52,281
Now remember,
a class is actually a template.

35
00:01:52,281 --> 00:01:55,451
So the class contains data fields but
not data.

36
00:01:55,451 --> 00:01:58,803
What that means is,
when you make this Point class,

37
00:01:58,803 --> 00:02:02,393
I'm giving a template on how
a point should be created.

38
00:02:02,393 --> 00:02:05,771
I'm saying, here's the data that a point
should have and here's the function that

39
00:02:05,771 --> 00:02:08,640
should operate in that data, but
I am not actually providing the data.

40
00:02:08,640 --> 00:02:11,901
So a Point class is really a template for
a point.

41
00:02:11,901 --> 00:02:15,188
An actual point has to have data,
has to have an x coordinate and

42
00:02:15,188 --> 00:02:17,057
a y coordinate associated with it.

43
00:02:17,057 --> 00:02:22,317
So an object is an instantiation of
the class, an instance of a class.

44
00:02:22,317 --> 00:02:24,430
So it contains actual data.

45
00:02:24,430 --> 00:02:28,277
So, as an example, say in my geometry
program that I'm trying to make,

46
00:02:28,277 --> 00:02:31,368
I have a triangle and
this triangle has three points on it,

47
00:02:31,368 --> 00:02:34,795
three coordinates, (0,0), (6,0), (5,5).

48
00:02:34,795 --> 00:02:37,974
So there are three point objects
that I want to create, and

49
00:02:37,974 --> 00:02:39,439
I call these objects now.

50
00:02:39,439 --> 00:02:43,067
These objects, they're made based
on the Point class template so

51
00:02:43,067 --> 00:02:47,018
they have x coordinate and y coordinate
just like the template says, but

52
00:02:47,018 --> 00:02:48,992
they have actual values for those.

53
00:02:48,992 --> 00:02:53,297
So the (0,0) point will have 0 and
0 for the x and (5,5) point has 5 and

54
00:02:53,297 --> 00:02:54,008
5 and so on.

55
00:02:54,008 --> 00:02:56,162
So for one class you can have many,

56
00:02:56,162 --> 00:02:59,744
many objects of that class
that instantiate that class.

57
00:02:59,744 --> 00:03:03,551
They have actual data in them
that fill in the data fields.

58
00:03:03,551 --> 00:03:06,884
So, just want to make clear the difference
between a class and an object.

59
00:03:06,884 --> 00:03:11,099
Encapsulation is another
concept that's usually

60
00:03:11,099 --> 00:03:15,127
associated with object
oriented programming.

61
00:03:15,127 --> 00:03:16,231
Actually, you know what,

62
00:03:16,231 --> 00:03:19,641
I would say it's associated with the use
of abstraction in general, but right now,

63
00:03:19,641 --> 00:03:22,586
we're talking about it in the context
of object oriented programming.

64
00:03:22,586 --> 00:03:27,347
And the idea behind
encapsulation is that you might

65
00:03:27,347 --> 00:03:31,562
want to hide data from the programmer,
okay?

66
00:03:31,562 --> 00:03:35,358
So when I say the programmer, I mean
the programmer who is using your class.

67
00:03:35,358 --> 00:03:38,541
So, the person who's defining the class,
you can't hide anything from that person.

68
00:03:38,541 --> 00:03:41,506
But if there's a programmer
who's using your class,

69
00:03:41,506 --> 00:03:44,415
you might want to hide some data,
conceal something.

70
00:03:44,415 --> 00:03:46,339
So you might want to make the data,

71
00:03:46,339 --> 00:03:50,894
allow the data only to be accessed using
the methods that are part of the class.

72
00:03:50,894 --> 00:03:54,724
So rather than allowing the programmer
to just go straight in and modify,

73
00:03:54,724 --> 00:03:58,919
say it's a point, just go straight in and
modify the x and the y values as a point,

74
00:03:58,919 --> 00:04:01,696
we might instead say, look,
if you want to modify it,

75
00:04:01,696 --> 00:04:06,061
you have to use this method to modify it,
the method that's provided in the class.

76
00:04:06,061 --> 00:04:07,722
And why would you do this?

77
00:04:07,722 --> 00:04:10,620
Maybe we don't trust the programmer
to keep the data consistent,

78
00:04:10,620 --> 00:04:11,716
that's the main thing.

79
00:04:11,716 --> 00:04:13,595
Not that we don't trust the programmer,
but

80
00:04:13,595 --> 00:04:16,920
the programmer has a lot of things on his
or mind, might make a mistake, right?

81
00:04:16,920 --> 00:04:21,296
So we want to relieve the programmer
that burden of dealing with the internal

82
00:04:21,296 --> 00:04:22,830
consistency of the data.

83
00:04:22,830 --> 00:04:24,658
So we just say look, programmer,

84
00:04:24,658 --> 00:04:27,874
if you use these methods to
modify the internal data then we,

85
00:04:27,874 --> 00:04:32,433
the people who made the class, guarantee
that the data will stay consistent, okay?

86
00:04:32,433 --> 00:04:36,394
So you, as a programmer, you don't have to
think about that, just use our methods.

87
00:04:36,394 --> 00:04:37,774
So that's encapsulation.

88
00:04:37,774 --> 00:04:40,576
Where you say look, the internal
data can't be accessed directly from

89
00:04:40,576 --> 00:04:43,811
the outside, or at least part of it can't
be accessed directly from the outside.

90
00:04:43,811 --> 00:04:47,714
You basically put up a wall,
a hard abstraction barrier,

91
00:04:47,714 --> 00:04:51,310
which are the methods that
you use to access the data.

92
00:04:51,310 --> 00:04:54,649
So as an example, let's say I've
got a point and a function, and

93
00:04:54,649 --> 00:04:58,322
I want to do this point is to double
its distance from the origin, right?

94
00:04:58,322 --> 00:05:01,988
So I want to double its x and double its
y so it's twice as far along the line

95
00:05:01,988 --> 00:05:05,165
between the origin and the point,
you want to move that point,

96
00:05:05,165 --> 00:05:08,608
you want to scale it, to double it,
right, double its distance.

97
00:05:08,608 --> 00:05:10,685
So you gotta double the x and
double the y.

98
00:05:10,685 --> 00:05:14,077
So option one is to make
a method to encapsulate, right?

99
00:05:14,077 --> 00:05:15,939
So you make a method
called double distance and

100
00:05:15,939 --> 00:05:17,234
it does exactly that function.

101
00:05:17,234 --> 00:05:18,627
That's the safe way.

102
00:05:18,627 --> 00:05:21,755
Another way is to say look,
I don't want to make that method,

103
00:05:21,755 --> 00:05:24,883
I'll just let the programmer
directly access the x and y, and

104
00:05:24,883 --> 00:05:27,674
the programmer can double the x and
y when they want to.

105
00:05:27,674 --> 00:05:32,252
The problem with that is what if
the programmer makes a little mistake, and

106
00:05:32,252 --> 00:05:34,794
doubles the X but
forgets to double the Y or

107
00:05:34,794 --> 00:05:37,496
doubles the X and
triples the Y or whatever?

108
00:05:37,496 --> 00:05:41,226
Whatever the mistake, if a mistake
like that happens then the X and

109
00:05:41,226 --> 00:05:45,102
the Y values inside the object
are now inconsistent with each other.

110
00:05:45,102 --> 00:05:47,400
And so a mistake was allowed to be made,

111
00:05:47,400 --> 00:05:51,581
where if you force them to use this
Double Dist function that you made and

112
00:05:51,581 --> 00:05:55,987
you know you debugged it correctly,
then they can't make such a mistake.

113
00:05:55,987 --> 00:05:57,530
Thank you.