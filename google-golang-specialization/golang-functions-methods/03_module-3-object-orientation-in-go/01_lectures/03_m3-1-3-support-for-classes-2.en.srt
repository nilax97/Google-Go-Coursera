1
00:00:00,008 --> 00:00:04,440
Module 3: Object-Orientation in Go,
Topic 1.3: Support for Classes.

2
00:00:07,190 --> 00:00:10,125
Now, in a normal object directed language,

3
00:00:10,125 --> 00:00:15,001
it's a class is defined, it's data
associated with some kind of methods.

4
00:00:15,001 --> 00:00:18,481
And usually,
you can associate lots of different data,

5
00:00:18,481 --> 00:00:21,246
you can roll up lots of
different variables.

6
00:00:21,246 --> 00:00:25,012
Maybe an anti-float, whatever type
of data you can put a lot of it,

7
00:00:25,012 --> 00:00:26,678
as much as you want together.

8
00:00:26,678 --> 00:00:29,748
And then associate that
with any number of methods,

9
00:00:29,748 --> 00:00:31,850
asnd you can do the same thing in go.

10
00:00:31,850 --> 00:00:34,854
Of course, you're going to use a receiver
type, just like we talked about,

11
00:00:34,854 --> 00:00:36,967
you don't have classes,
you have receiver types.

12
00:00:36,967 --> 00:00:39,311
But you can just use a type
that has lots of data in it.

13
00:00:39,311 --> 00:00:43,580
So, before we're using examples where
the type was just an int myant, right.

14
00:00:43,580 --> 00:00:45,298
It was just an int, one piece of data.

15
00:00:45,298 --> 00:00:52,078
But it's very common to use a struct as
a receiver type, a struct of some kind.

16
00:00:52,078 --> 00:00:56,245
So structs basically allow you to compose
all kinds of different data fields.

17
00:00:56,245 --> 00:01:00,895
So in this case, my point struct,
I'm just composing two numbers,

18
00:01:00,895 --> 00:01:02,670
an x and a y, both floats.

19
00:01:02,670 --> 00:01:05,249
So two floating point numbers,
they're composed into one struct.

20
00:01:05,249 --> 00:01:10,468
But remember,
with a struct you can compose an arbitrary

21
00:01:10,468 --> 00:01:14,829
amount of information,
you can put together.

22
00:01:14,829 --> 00:01:18,960
So it's very common to see a receiver
type be a struct of some kind with

23
00:01:18,960 --> 00:01:20,465
lots of different data.

24
00:01:20,465 --> 00:01:22,640
It's a traditional feature of classes,

25
00:01:22,640 --> 00:01:25,320
people just roll lots of
different data together.

26
00:01:27,460 --> 00:01:32,327
Now, the structs with methods, you could
take a struct and define it as a type,

27
00:01:32,327 --> 00:01:34,665
like we just did with that point type.

28
00:01:34,665 --> 00:01:37,064
And then you can associate
methods with that type.

29
00:01:37,064 --> 00:01:40,690
And then you get what you would normally
think of as a class in another language.

30
00:01:40,690 --> 00:01:44,610
You get the struct with lots of different
data, associate it with as many different

31
00:01:44,610 --> 00:01:46,857
methods as you want to
associate it with struct.

32
00:01:46,857 --> 00:01:49,482
So, we got an example of that right here,

33
00:01:49,482 --> 00:01:53,312
we're using the point that I
defined just in the last slide.

34
00:01:53,312 --> 00:01:57,241
So, this point, I want to make
a function called DistToOrigin, and

35
00:01:57,241 --> 00:01:59,280
I've defined it right there.

36
00:01:59,280 --> 00:02:04,180
Notice that to the left of the name of the
function DistToOrigin, I pass it a point,

37
00:02:04,180 --> 00:02:05,236
p Point, right?

38
00:02:05,236 --> 00:02:07,631
When I say I pass it,
it's an implicit pass, right.

39
00:02:07,631 --> 00:02:12,869
So it doesn't have any explicit arguments,
but its receiver type is a Point called p,

40
00:02:12,869 --> 00:02:16,890
and that will be implicitly
passed to DistToOrig.

41
00:02:16,890 --> 00:02:19,723
And then if you look at the function,
the insides of it, the internals,

42
00:02:19,723 --> 00:02:21,774
it's just doing the Pythagorean theorem,
right.

43
00:02:21,774 --> 00:02:24,468
It's squaring the x, squaring the y,

44
00:02:24,468 --> 00:02:28,650
adding together,
then it returns the square root.

45
00:02:28,650 --> 00:02:31,670
So it just does Pythagorean
theorem nothing sophisticated.

46
00:02:31,670 --> 00:02:36,954
Then in my main, I can make
a point p1 is three comma four and

47
00:02:36,954 --> 00:02:40,679
then I can just call p1.DistToOrigin.

48
00:02:40,679 --> 00:02:43,144
And that p1 together with its x and

49
00:02:43,144 --> 00:02:47,397
y coordinates will be implicitly
passed to dist to origin.

50
00:02:47,397 --> 00:02:51,301
Dist to origin will then
do Pythagorean theorem and

51
00:02:51,301 --> 00:02:55,670
return the distance which is
five in this case, thanks.