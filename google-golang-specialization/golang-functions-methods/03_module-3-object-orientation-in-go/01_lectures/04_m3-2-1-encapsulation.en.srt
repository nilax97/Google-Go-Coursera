1
00:00:00,110 --> 00:00:02,940
Module 3 or Object Orientation in Go.

2
00:00:02,940 --> 00:00:05,110
Topic 2.1, Encapsulation.

3
00:00:05,110 --> 00:00:08,060
So Go provides a lot of
different support for

4
00:00:08,060 --> 00:00:11,230
encapsulation and keeping private data.

5
00:00:11,230 --> 00:00:14,140
But you want to be able to have
controlled access of the data.

6
00:00:14,140 --> 00:00:17,008
So typically, even if you have
private data in some package,

7
00:00:17,008 --> 00:00:19,225
you probably don't want to
hide it completely.

8
00:00:19,225 --> 00:00:24,990
All right, or
else why are you even importing it anyway?

9
00:00:24,990 --> 00:00:28,210
You hide it but
you want to have controlled access to it.

10
00:00:28,210 --> 00:00:31,460
So what that means is you want people
to be able to use that data but

11
00:00:31,460 --> 00:00:33,795
only in the way that you define, okay?

12
00:00:33,795 --> 00:00:37,075
Using your methods or functions.

13
00:00:37,075 --> 00:00:41,635
So what you can do is you can define
a set of functions, public functions,

14
00:00:41,635 --> 00:00:47,225
that allow another package, an external
package, to access the hidden data.

15
00:00:47,225 --> 00:00:50,015
So as an example,
say I got my data package right there,

16
00:00:50,015 --> 00:00:54,480
package data,
got my hidden variable x int= 1.

17
00:00:54,480 --> 00:00:59,100
And then I can define inside that same
package a function called PrintX.

18
00:00:59,100 --> 00:01:01,310
And PrintX just prints x, okay?

19
00:01:01,310 --> 00:01:02,750
It does exactly what it says.

20
00:01:02,750 --> 00:01:05,630
Now PrintX,
notice it starts with a capital letter, so

21
00:01:05,630 --> 00:01:07,710
that means it gets exported.

22
00:01:07,710 --> 00:01:12,937
So if my main package decides to import
the data package, the main package will

23
00:01:12,937 --> 00:01:18,337
be able to access this PrintX method even
though it can't directly access the x.

24
00:01:18,337 --> 00:01:23,394
Okay, and so now what happens is I
can access the main method, the main

25
00:01:23,394 --> 00:01:28,568
function can access the x variable
only through this PrintX function.

26
00:01:28,568 --> 00:01:32,728
So if I want to see the x value,
I have to call PrintX.

27
00:01:32,728 --> 00:01:35,929
So if I look in my main code,
I import the data and

28
00:01:35,929 --> 00:01:40,820
then in my main I can call data.PrintX and
then I can see the value of x.

29
00:01:40,820 --> 00:01:44,170
Even though I couldn't directly
access x from my main,

30
00:01:44,170 --> 00:01:48,010
I can indirectly access it
through these public functions.

31
00:01:48,010 --> 00:01:51,030
So this is generally how we're
going to control access to data

32
00:01:51,030 --> 00:01:52,140
that we want to hide.

33
00:01:52,140 --> 00:01:54,390
You want to give access but
only in a controlled fashion.

34
00:01:54,390 --> 00:01:58,140
We let them see what we want them to see,
is the idea.

35
00:01:58,140 --> 00:02:00,631
Also, to modify code, to modify x, right.

36
00:02:00,631 --> 00:02:04,170
I mean as it is,
x cannot be modified externally.

37
00:02:04,170 --> 00:02:08,390
There's no way the main can
directly see x or modify it.

38
00:02:08,390 --> 00:02:11,280
But if I wanted to allow
the main to be able to modify x,

39
00:02:11,280 --> 00:02:14,572
I could make some kind of
a function inside the package,

40
00:02:14,572 --> 00:02:19,249
start it with a capital letter that
main could call to access the variable.

41
00:02:21,100 --> 00:02:23,610
So we can do this with structures too.

42
00:02:23,610 --> 00:02:29,150
So say we have some kind
of type that's a structure.

43
00:02:29,150 --> 00:02:30,340
Like a point type.

44
00:02:30,340 --> 00:02:32,880
We put that in our data package again,
right?

45
00:02:32,880 --> 00:02:38,390
And maybe the x and the y and coordinates,
we don't want the outside user,

46
00:02:38,390 --> 00:02:42,260
the person who is using this type to
be able to directly modify x and y.

47
00:02:42,260 --> 00:02:45,860
We want to be able to
control their observation and

48
00:02:45,860 --> 00:02:47,970
their modifications to x and y.

49
00:02:47,970 --> 00:02:51,960
So we give them lower-case names,
lower-case x, lower-case y.

50
00:02:51,960 --> 00:02:55,300
But we define a set of
functions inside that package,

51
00:02:55,300 --> 00:02:58,280
the data package, that are public, and

52
00:02:58,280 --> 00:03:02,830
allow another package to use to
actually access x and y in some way.

53
00:03:02,830 --> 00:03:03,510
So for instance,

54
00:03:03,510 --> 00:03:07,400
first one you might want to define is
InitMe that I'm defining down here.

55
00:03:07,400 --> 00:03:12,540
And that, notice it is associated with the
point type, the receiver type is Point,

56
00:03:12,540 --> 00:03:14,320
so p *Point.

57
00:03:14,320 --> 00:03:18,680
I call InitMe and InitMe just allows
me to initialize x and y, right?

58
00:03:18,680 --> 00:03:20,070
That's something clearly
you're going to want to do.

59
00:03:20,070 --> 00:03:22,730
You make a point,
you want to initialize the x and y values.

60
00:03:22,730 --> 00:03:26,880
So I do it through this InitMe
method that I'm defining.

61
00:03:26,880 --> 00:03:29,635
And it just sets p.x equal
to the first argument,

62
00:03:29,635 --> 00:03:31,810
p.y equal to the second argument.

63
00:03:31,810 --> 00:03:36,676
So in this way, using this function,
this InitMe function, I can modify x and

64
00:03:36,676 --> 00:03:41,639
y, even though I can't directly touch x
and y I can do it through this function.

65
00:03:41,639 --> 00:03:46,688
Then a few more functions that you might
want to add to allow access to the x and

66
00:03:46,688 --> 00:03:48,226
y, they're hidden.

67
00:03:48,226 --> 00:03:49,706
This is Scale.

68
00:03:49,706 --> 00:03:54,014
So Scale, again, it's associated with
Point, its receiver type is Point.

69
00:03:54,014 --> 00:03:59,565
And Scale, you pass it a floating point
number v, and it just scales x and

70
00:03:59,565 --> 00:04:06,130
y together, so it multiplies p.x times
the scale factor, p.y times scale factor.

71
00:04:06,130 --> 00:04:09,254
Again, we're not trusting
the programmer to do this,

72
00:04:09,254 --> 00:04:11,450
we're scaling both of them together.

73
00:04:11,450 --> 00:04:14,060
So if they want to scale,
they have to call our scale function and

74
00:04:14,060 --> 00:04:15,760
they can scale them both.

75
00:04:15,760 --> 00:04:20,190
Also, print me, maybe I want to be
able to print the x and y values.

76
00:04:20,190 --> 00:04:23,830
And since another package
can't directly access x and

77
00:04:23,830 --> 00:04:28,470
y to call Println on it, we have to
provide a function for that, PrintMe.

78
00:04:28,470 --> 00:04:33,070
And it just goes in there and it prints
out the x and y, prints out p.x, p.y.

79
00:04:33,070 --> 00:04:36,330
So now we define a set of functions,
a set of methods, really,

80
00:04:36,330 --> 00:04:38,740
because they're all associated
with the type Point.

81
00:04:38,740 --> 00:04:42,360
And these methods are all public because
we started them with capital letters,

82
00:04:42,360 --> 00:04:44,360
Print and Scale, they're all capital.

83
00:04:44,360 --> 00:04:47,220
So we can access them outside in,
say, our main package.

84
00:04:48,740 --> 00:04:52,860
So in our main package we can use them,
so for instance, in

85
00:04:53,920 --> 00:04:59,220
this main we make a point,
data.Point call p.

86
00:04:59,220 --> 00:05:03,093
Then we call p.InitMe,
it initializes x and y to 3 and 4.

87
00:05:03,093 --> 00:05:04,905
Then we call p.Scale to scale it,

88
00:05:04,905 --> 00:05:07,845
to multiply 3 and 4 times 2,
so it should be 6 and 8.

89
00:05:07,845 --> 00:05:11,360
Then we call p.PrintMe, it prints 6 and 8.

90
00:05:11,360 --> 00:05:13,101
So if we ran this it would work.

91
00:05:13,101 --> 00:05:16,885
And in this way even though
we can't from the main,

92
00:05:16,885 --> 00:05:22,519
we can't directly access x and y,
we can't say p.x= bam p.y=, right?

93
00:05:22,519 --> 00:05:26,499
But we can access them
through these methods that

94
00:05:26,499 --> 00:05:29,710
are provided to us in a controlled way.

95
00:05:29,710 --> 00:05:31,117
Thank you.