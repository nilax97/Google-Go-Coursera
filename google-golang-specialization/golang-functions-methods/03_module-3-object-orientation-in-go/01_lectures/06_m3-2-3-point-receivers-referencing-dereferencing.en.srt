1
00:00:00,008 --> 00:00:02,350
Module 3, object-orientation in go.

2
00:00:02,350 --> 00:00:05,720
Topic 2.3, point receivers,
referencing, and dereferencing.

3
00:00:07,730 --> 00:00:12,290
So one thing about using a pointer
receiver is that there's no need to

4
00:00:12,290 --> 00:00:17,080
dereference the pointer inside the method.

5
00:00:17,080 --> 00:00:21,780
So what I mean by this is that, so
let's take a look at this example OffsetX.

6
00:00:21,780 --> 00:00:23,540
I want it to have a pointer receiver,

7
00:00:23,540 --> 00:00:27,940
because I want OffsetX to actually be able
to modify the X coordinate of the type.

8
00:00:27,940 --> 00:00:30,560
So I have to pass it a pointer to p.

9
00:00:30,560 --> 00:00:34,480
So now if you look to the left
of the function name OffsetX,

10
00:00:34,480 --> 00:00:36,370
you see p star point.

11
00:00:36,370 --> 00:00:38,500
So the receiver is a pointer type.

12
00:00:38,500 --> 00:00:42,925
Now notice inside
the function I say p.x=p.x+v.

13
00:00:43,970 --> 00:00:48,765
I don't say *p.x=*p.x+v, right.

14
00:00:48,765 --> 00:00:52,200
That's a dereferencing that you
would normally use with pointers.

15
00:00:52,200 --> 00:00:56,905
I don't have to do that because this is a
common enough thing that going just allows

16
00:00:56,905 --> 00:01:00,653
you to get it with basically the (
) recognizes it and says okay,

17
00:01:00,653 --> 00:01:02,070
I know what you mean.

18
00:01:02,070 --> 00:01:05,379
If you can just say p.x and
it knows even though it's a pointer,

19
00:01:05,379 --> 00:01:09,970
it knows to get the x p, it knows to
basically de-reference it automatically.

20
00:01:09,970 --> 00:01:11,370
So, it's just a handy shorthand,

21
00:01:11,370 --> 00:01:14,880
you don't have to do the dereferencing
when you're doing this.

22
00:01:16,540 --> 00:01:19,448
And likewise there's no
need to reference either.

23
00:01:19,448 --> 00:01:23,160
So, say I'm in my main and

24
00:01:23,160 --> 00:01:28,420
I want to I've defined my offset X, as I
showed you, where it accepts a pointer,

25
00:01:29,530 --> 00:01:33,330
the receiver type is a pointer, right?

26
00:01:33,330 --> 00:01:39,170
Now in this case, in this main, I'm
declaring this point p I'm making it 3,4.

27
00:01:39,170 --> 00:01:43,740
So p is actually a struct, right?

28
00:01:43,740 --> 00:01:45,960
It is the type, it is the actual struct.

29
00:01:45,960 --> 00:01:49,130
It is not appointed to the struct,
it is the struct.

30
00:01:49,130 --> 00:01:53,380
But then when I call OffsetX,
I say p.OffsetX,

31
00:01:53,380 --> 00:01:57,650
when really, since offset X is supposed
to have a point to receiver you

32
00:01:57,650 --> 00:02:00,780
would think you would have to
say anforsand P dot offset X.

33
00:02:00,780 --> 00:02:03,760
But you don't,
you can just say P dot offset X and

34
00:02:03,760 --> 00:02:07,690
the goal compiler recognizes that just
because this is a common thing to do.

35
00:02:07,690 --> 00:02:10,300
So it just makes it easier,
it's a convenience.

36
00:02:10,300 --> 00:02:15,730
So when using pointer receivers it is
good programming practice to either

37
00:02:15,730 --> 00:02:20,850
have all methods use pointer receivers, or
have none of them use pointer receivers.

38
00:02:20,850 --> 00:02:22,000
It's just a good standard.

39
00:02:22,000 --> 00:02:23,120
It's easy to get confused.

40
00:02:23,120 --> 00:02:25,960
So if you have some methods,
use pointer receivers and

41
00:02:25,960 --> 00:02:29,290
some not use pointer receivers
It can get confusing.

42
00:02:29,290 --> 00:02:33,150
You'll send a pointer to the one that
doesn't need a pointer and so on.

43
00:02:33,150 --> 00:02:37,820
So it's just more appropriate to use,
it's good practice, you don't have to.

44
00:02:37,820 --> 00:02:40,870
You can mix and match if you want,
but it's good practice to use

45
00:02:40,870 --> 00:02:45,450
all pointer references for a particular
type or all non pointer references.

46
00:02:47,760 --> 00:02:48,260
Thank you.