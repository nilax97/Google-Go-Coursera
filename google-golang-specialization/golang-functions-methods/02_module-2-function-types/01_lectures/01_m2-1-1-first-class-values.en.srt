1
00:00:00,110 --> 00:00:01,770
Module 2, Function Types.

2
00:00:01,770 --> 00:00:05,550
Topic 1.1, First-class Values.

3
00:00:05,550 --> 00:00:08,830
So, we've been talking about
functions in this class already.

4
00:00:08,830 --> 00:00:11,360
You can't really program
in Go without functions.

5
00:00:11,360 --> 00:00:13,700
So you've always gotta have
at least the main function.

6
00:00:13,700 --> 00:00:16,180
And we've had that in all
the examples that we've used.

7
00:00:16,180 --> 00:00:18,930
But what we're going to talk
about now is the ways in which

8
00:00:18,930 --> 00:00:22,510
Go allows you to treat a function
as a first-class value.

9
00:00:22,510 --> 00:00:25,450
So there's this term first-class value,
treating the functions as first-class

10
00:00:25,450 --> 00:00:28,340
values and it's associated
with functional programming.

11
00:00:28,340 --> 00:00:32,860
Functional programming is a way of
programming, a programming paradigm let's

12
00:00:32,860 --> 00:00:37,040
say, that is different than what
people usually use, let's say.

13
00:00:37,040 --> 00:00:39,860
So if you've ever programmed in scheme or
something like that,

14
00:00:39,860 --> 00:00:45,080
that's a functional programming language,
ML, there are a bunch of these languages.

15
00:00:45,080 --> 00:00:47,590
And so
it's a different way of thinking, and

16
00:00:47,590 --> 00:00:51,510
we're not going to really do
a lot of functional programming.

17
00:00:51,510 --> 00:00:54,180
But there are some of features of
functional programming that can be

18
00:00:54,180 --> 00:00:55,380
very useful.

19
00:00:55,380 --> 00:01:00,690
So implement some of these features,
and we'll talk about how to use those.

20
00:01:00,690 --> 00:01:05,570
So treating a function as a first-class
value, generally means being able to

21
00:01:05,570 --> 00:01:11,030
treat a function like any other type,
like an integer, a string, a float.

22
00:01:11,030 --> 00:01:13,440
All the things that you can
do to one of those types,

23
00:01:13,440 --> 00:01:15,380
you can also do to a function.

24
00:01:15,380 --> 00:01:19,810
So as an example, variables can be
declared to be a function type.

25
00:01:19,810 --> 00:01:22,820
So you can always declare a variable to be
an integer type, a floating point type,

26
00:01:22,820 --> 00:01:23,830
things like that.

27
00:01:23,830 --> 00:01:26,360
You can also declare it
to be a function type.

28
00:01:26,360 --> 00:01:29,530
And you can then set a variable
equal to a function.

29
00:01:29,530 --> 00:01:31,030
You can create them dynamically, so

30
00:01:31,030 --> 00:01:34,630
in your code,
you can create an integer on a fly, right?

31
00:01:34,630 --> 00:01:38,998
In the middle of your code, you can
create new variable, X or whatever,

32
00:01:38,998 --> 00:01:41,128
and X equal three, whatever.

33
00:01:41,128 --> 00:01:45,000
And that creates an integer on a fly at
run time while you're running the code.

34
00:01:45,000 --> 00:01:49,080
So that's creating a variable dynamically,
creating some type dynamically.

35
00:01:49,080 --> 00:01:50,640
You can do that with functions, too.

36
00:01:50,640 --> 00:01:52,530
Now up until this point,
we haven't done that.

37
00:01:52,530 --> 00:01:56,110
We create them statically,
just at the top level you say func main or

38
00:01:56,110 --> 00:01:57,230
something like that.

39
00:01:57,230 --> 00:01:59,570
But we want to be able to
create them dynamically, too.

40
00:01:59,570 --> 00:02:01,100
Sometimes it's very useful.

41
00:02:01,100 --> 00:02:03,880
So inside a function, you can create
a new function, right inside.

42
00:02:05,040 --> 00:02:07,850
Functions can be passed as
arguments to other functions and

43
00:02:07,850 --> 00:02:09,390
returned as values from other functions.

44
00:02:09,390 --> 00:02:12,480
So just like an integer,
a flow, to something like that.

45
00:02:12,480 --> 00:02:13,860
You can pass it as an argument.

46
00:02:13,860 --> 00:02:16,670
You can pass a function as
an argument to a function, or

47
00:02:16,670 --> 00:02:20,470
a function can return a new
function as its return value.

48
00:02:21,680 --> 00:02:25,028
Also it can be stored in a data structure.

49
00:02:25,028 --> 00:02:27,640
So you can have a data structure,
maybe a slice.

50
00:02:27,640 --> 00:02:29,390
You can have a slice of integers,
something like that.

51
00:02:29,390 --> 00:02:31,100
You can also have a slice of floats.

52
00:02:31,100 --> 00:02:32,570
So in all these ways,

53
00:02:32,570 --> 00:02:37,317
Go lang is going to allow us to treat
a function just like a regular type.

54
00:02:39,153 --> 00:02:42,480
So let's talk about how to
implement these things in Go.

55
00:02:42,480 --> 00:02:44,410
Start off with variables as function.

56
00:02:44,410 --> 00:02:48,690
So one thing you'd like to be able to
do sometimes is declare a variable

57
00:02:48,690 --> 00:02:50,130
as a function.

58
00:02:50,130 --> 00:02:53,650
So the variable basically acts
as an alias, another name for

59
00:02:53,650 --> 00:02:57,270
that function in this case,
we do this the way we're doing right here.

60
00:02:57,270 --> 00:03:02,630
So if you look at the example code,
see in red,

61
00:03:02,630 --> 00:03:06,240
we've got that variable that we're
declaring right at the top called funcVar.

62
00:03:06,240 --> 00:03:11,070
And that is going to be my new variable
that I'm declaring to be a function type.

63
00:03:11,070 --> 00:03:13,630
So if you look at the top line,
var funcVar, and

64
00:03:13,630 --> 00:03:16,810
then to the right of it, I give its type,
and that's how you do it.

65
00:03:16,810 --> 00:03:20,920
So that's how you declare variables
of certain types you say var funcVar,

66
00:03:20,920 --> 00:03:23,620
let's say I want it to be an integer,
I'd say var funcVar int.

67
00:03:23,620 --> 00:03:27,200
So now I want it to be a function,
so I say var funcVar func, and

68
00:03:27,200 --> 00:03:30,040
I give the argument type, integer, right?

69
00:03:30,040 --> 00:03:33,920
And I give its return type, so that right
there, func, int in parentheses, and then

70
00:03:33,920 --> 00:03:38,110
int to the right of funcVar, you'd call
that a signature, a function signature.

71
00:03:38,110 --> 00:03:43,060
And so you have to put that to the right
of the variable name in the declaration.

72
00:03:43,060 --> 00:03:46,678
So that first line just declares
a new variable called funcVar,

73
00:03:46,678 --> 00:03:49,358
which will be able to be
assigned to a function.

74
00:03:49,358 --> 00:03:52,563
Now then right after that,
I declare a function,

75
00:03:52,563 --> 00:03:56,470
inc function, incFn and
it just does increment.

76
00:03:56,470 --> 00:04:00,568
Right, it takes a value x and
it increments it, returns x+1.

77
00:04:00,568 --> 00:04:02,160
So it's just a function.

78
00:04:02,160 --> 00:04:07,260
Now in the main,
first thing I do is I say funcVar = incFn.

79
00:04:07,260 --> 00:04:12,290
So right there, I am assigning
funcVar to be that function incFn.

80
00:04:12,290 --> 00:04:14,340
Now notice in that assignment there,

81
00:04:14,340 --> 00:04:17,380
I don't put the parenthesis
to the right of incFn.

82
00:04:17,380 --> 00:04:20,120
So normally, when you write a function,

83
00:04:20,120 --> 00:04:22,230
when you call a function,
you'd put parenthesis.

84
00:04:22,230 --> 00:04:25,120
Open paren, close paren to the right
of it, so if I wanted to call incFn,

85
00:04:25,120 --> 00:04:27,644
I'd say incFn open paren, close paren,

86
00:04:27,644 --> 00:04:31,340
put some parameters inside the
parentheses, but that's how you call it.

87
00:04:31,340 --> 00:04:32,470
You put those parentheses.

88
00:04:32,470 --> 00:04:34,470
We are not calling it here though, right?

89
00:04:34,470 --> 00:04:37,390
So all we're doing is we're saying
funcVar is basically appointed

90
00:04:37,390 --> 00:04:41,740
to the same function, to incFn, so
we just do an assignment just as shown.

91
00:04:41,740 --> 00:04:43,240
And then once I've done that,

92
00:04:43,240 --> 00:04:47,200
I can use funcVar just the same as
I would use that function name.

93
00:04:47,200 --> 00:04:49,120
So you can look at the last line.

94
00:04:49,120 --> 00:04:51,807
I'm doing a print,
I'd say print funcVar 1.

95
00:04:51,807 --> 00:04:54,380
That's the same as saying print incFn 1.

96
00:04:54,380 --> 00:04:56,430
Pass one to the function,
it executes it and

97
00:04:56,430 --> 00:04:58,710
increments it, it should print out a two.

98
00:04:58,710 --> 00:05:02,800
So in this way, the variable can be
assigned directly to a function.

99
00:05:02,800 --> 00:05:04,887
So this is treating a function
as a first-class object.

100
00:05:07,070 --> 00:05:09,349
Functions can also be passed as
arguments to other functions.

101
00:05:10,470 --> 00:05:14,150
So you can see that here,
I got this function called applyIt.

102
00:05:14,150 --> 00:05:18,180
And all it's supposed to do is
apply a function to an integer.

103
00:05:18,180 --> 00:05:20,910
So it takes two arguments,
my function applyIt.

104
00:05:20,910 --> 00:05:22,420
The first argument is a function.

105
00:05:22,420 --> 00:05:25,650
I call it afunct, and its type is func.

106
00:05:25,650 --> 00:05:28,540
Func takes an integer and
returns an integer.

107
00:05:28,540 --> 00:05:32,110
The second argument is a value
which I'm calling an integer.

108
00:05:32,110 --> 00:05:36,190
And the whole point of this function,
this whole function applyIt should

109
00:05:36,190 --> 00:05:39,260
basically take that function
that is its argument,

110
00:05:39,260 --> 00:05:43,790
apply that to the val argument,
and it should return an integer.

111
00:05:43,790 --> 00:05:46,990
And if you look at what the function
does in between the curly brackets,

112
00:05:46,990 --> 00:05:49,520
all you have is return afunct(val).

113
00:05:49,520 --> 00:05:52,220
So it takes whatever that
function is that you passed,

114
00:05:52,220 --> 00:05:56,880
passes the value to that function,
and returns its return value.

115
00:05:56,880 --> 00:06:00,700
So in this way,
we're passing a function as an argument

116
00:06:00,700 --> 00:06:02,740
to another function which
is useless sometimes.

117
00:06:02,740 --> 00:06:03,790
We'll talk about that.

118
00:06:06,120 --> 00:06:10,450
So here's sort of a slightly bigger
example where passing a function

119
00:06:10,450 --> 00:06:11,320
as an argument.

120
00:06:11,320 --> 00:06:14,860
Again at the top, we've got that
applyIt that I told you about, right?

121
00:06:14,860 --> 00:06:18,790
So we're just going to show how
you might use such a function.

122
00:06:18,790 --> 00:06:20,080
So applyIt is a function.

123
00:06:20,080 --> 00:06:21,980
It takes a function as an argument, and

124
00:06:21,980 --> 00:06:26,150
it applies the argument function to
the other argument, the val argument.

125
00:06:26,150 --> 00:06:28,740
Now then right after I define that,
I define two other functions,

126
00:06:28,740 --> 00:06:31,780
an inc function and a dec function,
increment, decrement functions.

127
00:06:31,780 --> 00:06:35,700
And they do what you would expect,
return x + 1, return x- 1.

128
00:06:35,700 --> 00:06:38,740
So we got those two functions,
then we looked at the main and

129
00:06:38,740 --> 00:06:40,420
there are two print statements.

130
00:06:40,420 --> 00:06:45,200
I call applyIt both times,
applyIt with the incFn as the argument and

131
00:06:45,200 --> 00:06:46,890
applyIt with the decFn.

132
00:06:46,890 --> 00:06:51,470
So when I call applyIt with the incFn,
the other argument is 2, right?

133
00:06:51,470 --> 00:06:55,410
So an incFn should increment that,
so it should print out a 3.

134
00:06:55,410 --> 00:06:59,546
And then the next print statement
calls applyIt with the decFn,

135
00:06:59,546 --> 00:07:01,270
decrement function.

136
00:07:01,270 --> 00:07:04,420
It passes it a 2, so we should return
a 1 and so 1 should get printed out.

137
00:07:04,420 --> 00:07:06,930
So if you run this code,
you should get a 3 and 1.

138
00:07:09,799 --> 00:07:11,033
Anonymous functions, so

139
00:07:11,033 --> 00:07:14,260
anonymous functions are basically
functions without a name.

140
00:07:14,260 --> 00:07:17,480
So you don't actually need to name
a function if you don't want to.

141
00:07:17,480 --> 00:07:20,310
Now, it is usually very
useful to name functions.

142
00:07:20,310 --> 00:07:23,270
If you want to call them,
you need a name for them, right?

143
00:07:23,270 --> 00:07:27,116
But if you're going to pass a function
as an argument to another function,

144
00:07:27,116 --> 00:07:29,772
often you don't need to
give it an explicit name.

145
00:07:29,772 --> 00:07:36,915
So you saw on the last slide just now,
I had this inc function and dec function.

146
00:07:36,915 --> 00:07:41,020
And I gave them names and
I passed it to my applyIt function.

147
00:07:41,020 --> 00:07:45,590
But I don't have to actually give them
names in order to pass them as arguments.

148
00:07:45,590 --> 00:07:48,991
I can just make the function
right there in the call.

149
00:07:48,991 --> 00:07:52,731
They call this a lambda calculator,
because this is a lambda and

150
00:07:52,731 --> 00:07:56,410
it comes from lambda calculus,
but we won't use those terms.

151
00:07:56,410 --> 00:07:59,380
That's a math term that people,
where this actually came from.

152
00:07:59,380 --> 00:08:03,740
Because these ideas of passing these
functions around came from lambda calculus

153
00:08:03,740 --> 00:08:05,060
a long time ago.

154
00:08:05,060 --> 00:08:08,500
But if we look at the function,
we've still got the same applyIt.

155
00:08:08,500 --> 00:08:10,900
But if you look at the main,
I call applyIt, and

156
00:08:10,900 --> 00:08:14,500
the first argument is
a function definition, right?

157
00:08:14,500 --> 00:08:18,390
So without a name, there's no name for it,
but it is otherwise a function definition.

158
00:08:18,390 --> 00:08:22,423
So I have it highlighted in red,
func takes x integer as an argument,

159
00:08:22,423 --> 00:08:25,703
returns an int, and
in curly brackets, return x + 1.

160
00:08:25,703 --> 00:08:27,860
So that's the increment function.

161
00:08:27,860 --> 00:08:30,470
But I never gave it the name inc function,
I don't have to.

162
00:08:30,470 --> 00:08:33,600
I just define the function the function
right there, define it without a name.

163
00:08:33,600 --> 00:08:35,650
So it is now called an anonymous function.

164
00:08:35,650 --> 00:08:37,790
And I can just pass it
directly to applyIt,

165
00:08:37,790 --> 00:08:39,690
and I didn't really need the name, right?

166
00:08:39,690 --> 00:08:41,650
ApplyIt will just apply that function.

167
00:08:41,650 --> 00:08:45,080
Names are more useful if you're going to
call this function directly in your code.

168
00:08:45,080 --> 00:08:48,030
You want it named associated with it,
but in a case like this,

169
00:08:48,030 --> 00:08:48,810
you don't need a name.

170
00:08:48,810 --> 00:08:51,450
You can just make the function and
just pass it as an argument.

171
00:08:53,583 --> 00:08:54,083
Thank you.