Module 1, Functions and Organization. Topic 1.2, Function Parameters and
Return values. So the examples that showed, the function examples that we
showed before were really simple. But generally, functions often need some
sort of input data to operate on, right? So functions are sequences of
instructions or sets of instructions, but they need some data to work on. So it is very common for a function to
have a set of what are called parameters of which are a set of variables that
are listed right after the function name in the declaration
in the parenthesis. And these are variables that they'll
become local variables that are used as inputs to the function. So the function actually operates
on these variables internally. Now an argument is the data
that's applied for those parameters during the call. So to give you an example, we've got
this function up here called foo. And in parenthesis after the word foo,
after the name, you see x int, y int. So in parenthesis is a list
of the parameters, so that means there are two parameters,
x and y, and they're both integers. So it expects somebody,
when the function gets called, it expects the caller to pass
two integers as arguments. And what it'll do is just print
the product, right, print x con times y. Now then, if we look in the main,
the main actually calls foo. And it calls foo and in parenthesis,
it says 2, 3, it has 2, 3. So 2 is going to be passed as x, 3 is going to be bound to y inside
the function foo when it executes. So when foo executes, 2 will be x,
3 will be y, and it'll print 2 times 3. It should print out 6 when
you run a program like this. So having parameters is a very
common thing for a function, because functions often need some
kind of input data to operate on. So there's different ways
you can pass parameters. I'll just give a couple of examples. Maybe you don't need parameters. Sometimes a function
does not need parameters. Maybe it just does something static and
doesn't need input, or it gets input from some other place,
right? Maybe it gets input from the user
typing it in directly, or maybe it gets it from a file,
something like that. So sometimes you don't need arguments. So if that's the case,
then you still have to put the open paren, close paren in the declaration
after the name. So, func foo open paren, close paren,
you still need that there. You just don't put anything
in the parenthesis and then the compiler knows that
there are no parameters. Also, another sort of short hand is
when you have multiple arguments of the same type,
you can comma separate them. You don't have to write int,
int, int, over and over say. So in the case below where you got foo,
it has two arguments, x and y and they're both ints. You could write (x int,
y int) or just write (x, y int). It's just another way to write it. Now in addition to having parameters,
which are inputs to the function, a function can have an output,
one or more outputs or return values. So each return value has to have a type,
okay? So the type of the return value has to be
are listed in the function declaration on the top right after the arguments,
after the parameters are listed. So maybe you know you returned an integer,
or you know you returned a float, or something like that. And the function call, once you define
a function that has a return value, then the call to that function can
be used on the right-hand side of a variable assignment, sorry. It's easier if I just show you. So to give you an example,
we've got this function foo. It takes an argument x, so you see x
int in parentheses after the name foo. Then after that,
you see the word int, right? Before the open curly brackets and
closed curly brackets, you see int. That means that the return value,
its type is going to be an integer. And then inside the function,
inside the curly brackets, you see it says return x + 1. So if this function has a return
value like it does in this case, then you have to call return in
the function at the end of the function. And whatever is after the word return
is what's going to get returned. So x, whatever the value of x is plus 1, that's what's going to get
returned by this function. So this function just returns
an incremented version of the variable. Now then down below,
you see that assignment y := foo(1). Now this is taken out of context, that y := foo(1) would have to
be in a function of it's own. So let's assume that that
statement is inside a main, right? I didn't want to draw the whole main,
but let's assume it's in a main. So that's a function call. It's calling the foo function. It's passing as
the argument of number one. So one is going to get bound to x inside
the function foo when it gets executed. So the function foo, that call to foo,
will return x + 1, so it will return 2. So that foo (1) that
will be replaced in that assignment statement with the value 2. So it'll get evaluated. It will be replaced with a 2, and
then y will be assigned to the number 2, to the integer 2. So in this way, this is what happens
whenever, you have a return value, you've gotta do an assignment,
right, y := foo (1). If I didn't, say,
I just called foo (1), right? Then it would execute the function, but
the return value would go nowhere, right? I have to have a variable assignment so
that the return value or values get captured. In the last example I showed the function,
it had one return value, but you can have multiple return values. So in this example foo2,
we've got two return values. So if we look at the declaration,
func foo2 (x int), that's in parentheses,
so that's the argument. Then after that, you have parentheses,
again, another set of parentheses, int, int. And that means that you have two return
values, and they're both integers. And then after that, you have the code,
the code just return that x, x + 1. So those two return values,
well, the first one will be x, the second one will be x + 1. So they're listed after return,
they're comma separated. And then when say in a function main or
something like that, when I call foo2, see that a,
b := foo2(3), right? So what'll happen is that a, b, a and b will be assigned to the two
return values of foo2. So a is going to be assigned,
like in this case, foo2 is going to return x and
x + 1, so that'll be 3 and 4. So a would be bound to 3,
b would be bound to 4. Thank you.