1
00:00:00,430 --> 00:00:05,020
Module 1: Functions and Organization,
Topic 1.1: Why Use Functions?

2
00:00:06,680 --> 00:00:09,510
So we're going to talk a little
bit about functions right now.

3
00:00:09,510 --> 00:00:12,577
We've been using functions since
the start because you basically have to.

4
00:00:12,577 --> 00:00:16,035
You can't write code,
at least in Go lang, without a function.

5
00:00:16,035 --> 00:00:19,360
So we've been using functions
already in passing.

6
00:00:19,360 --> 00:00:22,690
But now folks, a little bit more on how
they're used, or how you define them,

7
00:00:22,690 --> 00:00:27,150
how you use them, and be a little bit more
specific about the meaning of a function.

8
00:00:27,150 --> 00:00:28,190
So what is a function?

9
00:00:28,190 --> 00:00:32,010
A function is really just a set
of instructions with a name.

10
00:00:32,010 --> 00:00:36,640
And the name is actually optional,
as we'll see later in a few more lectures.

11
00:00:36,640 --> 00:00:38,840
We'll see that you don't
actually need the name,

12
00:00:38,840 --> 00:00:41,760
but it's a bunch of instructions
that are grouped together.

13
00:00:41,760 --> 00:00:45,410
Okay, and usually with a name or
certainly for now with a name.

14
00:00:45,410 --> 00:00:47,930
So we can see first,
we've got this first function over here,

15
00:00:47,930 --> 00:00:49,740
main, all right, func main.

16
00:00:49,740 --> 00:00:52,070
We're defining a function and
that's it's name, main.

17
00:00:52,070 --> 00:00:54,860
And we've, all of our programs so
far, they all have a main.

18
00:00:54,860 --> 00:00:58,660
In fact, all programs in Go have
to have a main function, right?

19
00:00:58,660 --> 00:01:00,480
That's where execution starts.

20
00:01:00,480 --> 00:01:02,400
We already said that but
I'll just remind you again.

21
00:01:02,400 --> 00:01:05,190
So there's always at least this function,
main.

22
00:01:05,190 --> 00:01:07,890
Now if you look at the way
we define that function,

23
00:01:07,890 --> 00:01:12,280
it says func main () and
then there's a curly bracket, right?

24
00:01:12,280 --> 00:01:14,415
So and then between the curly brackets,

25
00:01:14,415 --> 00:01:18,190
so there's open curly bracket and
a closed curly bracket.

26
00:01:18,190 --> 00:01:20,790
Between that is the contents
of the function.

27
00:01:20,790 --> 00:01:22,840
So those instructions in there
are the instructions that

28
00:01:22,840 --> 00:01:24,070
are part of the function.

29
00:01:24,070 --> 00:01:27,030
Now this main on top,
it's a very simple main.

30
00:01:27,030 --> 00:01:30,762
All it has is one line of code,
fmt.Printf ("Hello, world.").

31
00:01:30,762 --> 00:01:33,170
But you could put any number
of lines of code in there and

32
00:01:33,170 --> 00:01:36,180
they would be all grouped together
in this function called main.

33
00:01:37,190 --> 00:01:42,606
So this is really the simplest way
you can define a function at all.

34
00:01:42,606 --> 00:01:45,460
Now the main function is actually
a special function in the sense that

35
00:01:45,460 --> 00:01:47,420
you never call this function.

36
00:01:47,420 --> 00:01:52,020
So when you run your program from
the command line say, when you run

37
00:01:52,020 --> 00:01:55,430
the program, the main function gets
called and invoked immediately.

38
00:01:55,430 --> 00:01:58,850
So calling a function means
to execute that function.

39
00:01:58,850 --> 00:02:00,770
And that happens automatically with main.

40
00:02:00,770 --> 00:02:03,830
As soon as you run it, it goes
straight to main, calls that function.

41
00:02:03,830 --> 00:02:08,693
But for any other function you define,
you have to call that code explicitly.

42
00:02:08,693 --> 00:02:10,780
You have to call the function explicitly.

43
00:02:10,780 --> 00:02:13,310
So take a look at
the example on the bottom.

44
00:02:13,310 --> 00:02:15,000
We got two functions here.

45
00:02:15,000 --> 00:02:19,140
The top one is called PrintHello,
and the bottom one's called main.

46
00:02:19,140 --> 00:02:21,560
So let's look at the main for a second.

47
00:02:21,560 --> 00:02:26,180
The main, if you look at main, all it
has is one line, it calls PrintHello.

48
00:02:26,180 --> 00:02:28,210
So it says PrintHello().

49
00:02:28,210 --> 00:02:29,880
That is a function call.

50
00:02:29,880 --> 00:02:32,220
So that's where we call PrintHello.

51
00:02:32,220 --> 00:02:35,550
And at that point in execution,
it will go to PrintHello and

52
00:02:35,550 --> 00:02:39,980
execute whatever PrintHello,
whatever instructions PrintHello contains.

53
00:02:39,980 --> 00:02:44,560
Now if you look above at PrintHello, you
can see that it's just one instruction,

54
00:02:44,560 --> 00:02:47,640
just Hello, world, right,
just prints Hello, world.

55
00:02:47,640 --> 00:02:51,490
So the two programs that we have, the top
main and then the bottom program with

56
00:02:51,490 --> 00:02:55,200
the main and the PrintHello,
they do the same thing, right?

57
00:02:55,200 --> 00:02:57,700
It's just that the bottom function,
actually the bottom

58
00:02:57,700 --> 00:03:01,540
program has a function call in it,
an explicit function call inside main.

59
00:03:01,540 --> 00:03:03,080
It calls PrintHello.

60
00:03:03,080 --> 00:03:05,994
So this is really, what you're seeing
here is really the simplest kind of

61
00:03:05,994 --> 00:03:07,122
function you can ever have.

62
00:03:07,122 --> 00:03:10,780
And so function declaration is
where you define the function.

63
00:03:10,780 --> 00:03:15,411
So a function declaration in Go lang
starts with that keyword func, F-U-N-C.

64
00:03:15,411 --> 00:03:19,320
And then you have the name of
the function after that in the line.

65
00:03:19,320 --> 00:03:20,930
You have open paren, close paren.

66
00:03:20,930 --> 00:03:24,460
You might have arguments in there,
we'll talk about that soon.

67
00:03:24,460 --> 00:03:27,960
And you can also have return values,
we'll talk about that too.

68
00:03:27,960 --> 00:03:29,280
And then there's curly brackets,

69
00:03:29,280 --> 00:03:32,380
inside the curly brackets
are the contents of the function.

70
00:03:32,380 --> 00:03:35,320
And functions can also be called, in fact,
they have to be called, except for

71
00:03:35,320 --> 00:03:38,680
the main, which doesn't get called,
it just gets executed automatically.

72
00:03:40,700 --> 00:03:42,670
So why use a function?

73
00:03:42,670 --> 00:03:44,950
There are a lot of reasons.

74
00:03:44,950 --> 00:03:47,970
One reason right off
the top is reusability.

75
00:03:47,970 --> 00:03:53,370
So what that means is, you don't have to
rewrite the same code over and over again.

76
00:03:53,370 --> 00:03:55,180
So if you have a function,
and you define a function,

77
00:03:55,180 --> 00:03:58,810
you only need to define that function,
or declare that function one time.

78
00:03:58,810 --> 00:04:02,245
And then you can call it and
run it as many times as you want.

79
00:04:02,245 --> 00:04:06,815
So maybe you write this function once,
and then you need to invoke it 100 times.

80
00:04:06,815 --> 00:04:09,375
Maybe you need to do this
operation 100 different times.

81
00:04:09,375 --> 00:04:10,726
So then you can write it once, but

82
00:04:10,726 --> 00:04:13,685
you only write it once,
then you call it 100 times.

83
00:04:13,685 --> 00:04:17,020
And it saves you, it basically
shrinks the size of your source code.

84
00:04:17,020 --> 00:04:21,340
Okay, so and you can reuse it, you can
actually reuse it across projects too.

85
00:04:21,340 --> 00:04:24,010
So people can use your function.

86
00:04:24,010 --> 00:04:27,140
They can import the library and
use your function and your code too.

87
00:04:27,140 --> 00:04:28,980
So it's good for reuse.

88
00:04:28,980 --> 00:04:32,592
Good for commonly used
operations in this way, right?

89
00:04:32,592 --> 00:04:35,624
So things that you do a lot,
you might want to make them a function and

90
00:04:35,624 --> 00:04:39,430
give them a name, so that you don't have
to keep rewriting that code over and over.

91
00:04:39,430 --> 00:04:41,300
You can just call the code.

92
00:04:41,300 --> 00:04:44,880
So as a few examples of
functions you might make,

93
00:04:44,880 --> 00:04:47,900
say you're writing some kind
of graphics editing program.

94
00:04:47,900 --> 00:04:49,700
You might have a function
called threshold image.

95
00:04:49,700 --> 00:04:52,389
So not to go too much in
the graphic editing, but

96
00:04:52,389 --> 00:04:54,820
there are a lot of operations in graphics.

97
00:04:54,820 --> 00:04:58,380
So you got an image, it is often,
it's common to threshold an image.

98
00:04:58,380 --> 00:05:01,256
So basically if the brightness is above
a threshold, then you make it black.

99
00:05:01,256 --> 00:05:04,050
If it's below a threshold,
you make it white, okay?

100
00:05:04,050 --> 00:05:07,649
Common operation, you do it a lot so
you might write a function just for

101
00:05:07,649 --> 00:05:10,281
that purpose and
then you can call it 100 times.

102
00:05:10,281 --> 00:05:13,010
Whenever in your code you need to do it,
you call it.

103
00:05:13,010 --> 00:05:14,870
Say you got a database program.

104
00:05:14,870 --> 00:05:16,823
You might have a QueryDbase function.

105
00:05:16,823 --> 00:05:20,960
Querying a database is probably the main
thing you do with a database, right?

106
00:05:20,960 --> 00:05:24,130
You got a database, you want to get some
data out of it, you query the database.

107
00:05:24,130 --> 00:05:26,389
So that type of thing,
you might want to write it as a function,

108
00:05:26,389 --> 00:05:28,315
because you know you're going to
do it over and over again.

109
00:05:28,315 --> 00:05:30,360
And then you just call the function.

110
00:05:30,360 --> 00:05:33,040
Also another little example,
say you've got some music program, or

111
00:05:33,040 --> 00:05:34,167
a music editing program.

112
00:05:34,167 --> 00:05:35,750
ChangeKey (),

113
00:05:35,750 --> 00:05:38,450
which is a function I thought of, there
are many functions you can do with music.

114
00:05:38,450 --> 00:05:40,974
But changing key, maybe you want to
change a key from A to C, so

115
00:05:40,974 --> 00:05:44,775
maybe you have a function for that
purpose, right, because you do it a lot.

116
00:05:44,775 --> 00:05:49,335
These function titles is that
they're specific to the application.

117
00:05:49,335 --> 00:05:52,015
So in graphics,
your function might threshold an image,

118
00:05:52,015 --> 00:05:53,975
which is specific to graphics.

119
00:05:53,975 --> 00:05:57,762
Database program, you might query
a database specific to that domain,

120
00:05:57,762 --> 00:05:59,972
also changing keys specific to music.

121
00:05:59,972 --> 00:06:02,932
So this is something you're going to have
to think about when you make bigger pieces

122
00:06:02,932 --> 00:06:07,012
of code, and we'll talk more
about this later in the module.

123
00:06:07,012 --> 00:06:11,472
But when you're organizing your code,
your code will usually have lots of

124
00:06:11,472 --> 00:06:15,272
functions and they'll be organized
in some sort of a calling hierarchy.

125
00:06:15,272 --> 00:06:19,002
And you'll have to think about what you
want to put together in a function and

126
00:06:19,002 --> 00:06:19,672
what you don't.

127
00:06:20,690 --> 00:06:23,940
So another reason, another very important
reason to use functions, is for

128
00:06:23,940 --> 00:06:25,610
the purpose of abstraction.

129
00:06:25,610 --> 00:06:29,570
So abstraction is the designer's friend,
and

130
00:06:29,570 --> 00:06:31,910
not just in computer science,
but just all over the place.

131
00:06:31,910 --> 00:06:33,720
Any kind of design,
certainly for engineers,

132
00:06:33,720 --> 00:06:36,340
but I don't even think it's
limited to engineering.

133
00:06:36,340 --> 00:06:40,090
Abstraction is just hiding
details that are less important.

134
00:06:40,090 --> 00:06:42,890
I don't want to say unimportant
because details count.

135
00:06:42,890 --> 00:06:44,876
But hiding details that
are less important so

136
00:06:44,876 --> 00:06:47,120
you don't have to focus
on them all the time.

137
00:06:47,120 --> 00:06:50,350
Because generally the problem with
big designs is that there are so

138
00:06:50,350 --> 00:06:54,890
many details that a human can't keep
all these details in his or her mind.

139
00:06:54,890 --> 00:06:56,840
So you've got to do
something to simplify it.

140
00:06:56,840 --> 00:07:00,920
You've got to work with complicated code,
but it's got to be simple or

141
00:07:00,920 --> 00:07:03,020
else your mind just can't hold it.

142
00:07:03,020 --> 00:07:05,200
So abstraction is the way you do that.

143
00:07:05,200 --> 00:07:08,300
Abstraction is, you group things and
you hide the details and

144
00:07:08,300 --> 00:07:09,846
functions are exactly for this.

145
00:07:09,846 --> 00:07:14,020
So with a function,
you have some complicated behavior maybe,

146
00:07:14,020 --> 00:07:17,190
written in the function,
then you give that function a name.

147
00:07:17,190 --> 00:07:20,520
And once you've written that function and
you've debugged it, you know it works.

148
00:07:20,520 --> 00:07:23,445
You don't have to worry about all
the details of what goes on inside

149
00:07:23,445 --> 00:07:24,140
that function.

150
00:07:24,140 --> 00:07:26,490
All you need to do is call the function.

151
00:07:26,490 --> 00:07:28,960
So as long as you understand
the input-output behavior.

152
00:07:28,960 --> 00:07:32,122
So you understand a particular
function does a particular,

153
00:07:32,122 --> 00:07:34,916
if it gets these inputs,
it produces these outputs.

154
00:07:34,916 --> 00:07:37,110
Then you don't have to worry about how.

155
00:07:37,110 --> 00:07:38,620
So for instance, sorting, right?

156
00:07:38,620 --> 00:07:41,020
Say I want to make a sort function
that will sort some slice or

157
00:07:41,020 --> 00:07:41,680
something like that.

158
00:07:43,100 --> 00:07:44,440
I don't care how I sort it.

159
00:07:44,440 --> 00:07:45,940
There are many algorithms for
sorting, right?

160
00:07:45,940 --> 00:07:46,930
I can do a bubble sort.

161
00:07:46,930 --> 00:07:47,960
I can do insertion sort.

162
00:07:47,960 --> 00:07:49,280
I could do all kinds of sorts.

163
00:07:49,280 --> 00:07:50,175
Who cares, right?

164
00:07:50,175 --> 00:07:53,460
Hey, I can just say,
there are reasons why you would care but

165
00:07:53,460 --> 00:07:56,140
generally, you don't care,
you just want it sorted.

166
00:07:56,140 --> 00:07:58,120
So you just call this sort function.

167
00:07:58,120 --> 00:08:02,110
And you don't have to think about exactly
what it's doing inside there, do the sort,

168
00:08:02,110 --> 00:08:07,420
you just know given a slice,
the result is a sorted slice.

169
00:08:07,420 --> 00:08:09,860
So functions allow you to use abstraction.

170
00:08:09,860 --> 00:08:12,840
They're a way to implement abstraction,
and

171
00:08:12,840 --> 00:08:14,830
it improves understandability of the code.

172
00:08:16,080 --> 00:08:17,720
So for instance here,
we've got this example.

173
00:08:17,720 --> 00:08:19,250
I got some function called FindPupil.

174
00:08:19,250 --> 00:08:20,320
I bring this up because

175
00:08:20,320 --> 00:08:22,620
I'm actually working on a function
that does something like this.

176
00:08:22,620 --> 00:08:25,270
It basically looks at an eye,
a close-up picture of an eye, and

177
00:08:25,270 --> 00:08:28,040
it has to find the pupil,
find the center of the pupil.

178
00:08:28,040 --> 00:08:31,655
So this function, FindPupil,
is actually quite complicated.

179
00:08:31,655 --> 00:08:36,350
But to understand every
single step at one,

180
00:08:36,350 --> 00:08:40,960
and so I say I get show you the foreign
code, it is very nasty looking, okay?

181
00:08:40,960 --> 00:08:43,950
It would take you a while to figure
out what the heck was going on.

182
00:08:43,950 --> 00:08:46,270
But if I write it in
the way that I have here,

183
00:08:46,270 --> 00:08:49,550
where I have grouped things into a set
of functions, with nice names, right,

184
00:08:49,550 --> 00:08:53,250
GrabImage, FilterImage,
FindEllipses, right?

185
00:08:53,250 --> 00:08:55,990
Each one of those functions,
you have an idea what that does.

186
00:08:55,990 --> 00:08:58,530
So at a glance,
you can look at this function and

187
00:08:58,530 --> 00:09:00,950
get some understanding of how it works.

188
00:09:00,950 --> 00:09:03,920
Now, of course, you won't get a full
understanding just at a glance, but

189
00:09:03,920 --> 00:09:07,210
you get some part of
understanding right there, right?

190
00:09:07,210 --> 00:09:11,800
So this helps understandability, and
understandability is key in design.

191
00:09:11,800 --> 00:09:15,940
Now also I should note that
the naming is important for this, for

192
00:09:15,940 --> 00:09:17,060
this understandability, right?

193
00:09:17,060 --> 00:09:20,110
You need a good name, GrabImage,
FilterImage, FindEllipses.

194
00:09:20,110 --> 00:09:21,020
The name has to be good.

195
00:09:21,020 --> 00:09:24,870
If I just call those x, y, and z,
you would have no idea what those were.

196
00:09:24,870 --> 00:09:28,060
But if they have good names and
you group things appropriately,

197
00:09:28,060 --> 00:09:30,620
it's easier to understand
the code when you need to.

198
00:09:32,005 --> 00:09:32,505
Thank you.