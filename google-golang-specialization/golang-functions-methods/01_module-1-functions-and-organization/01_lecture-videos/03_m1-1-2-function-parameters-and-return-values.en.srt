1
00:00:00,150 --> 00:00:02,264
Module 1, Functions and Organization.

2
00:00:02,264 --> 00:00:07,447
Topic 1.2, Function Parameters and
Return values.

3
00:00:07,447 --> 00:00:09,164
So the examples that showed,

4
00:00:09,164 --> 00:00:12,953
the function examples that we
showed before were really simple.

5
00:00:12,953 --> 00:00:19,097
But generally, functions often need some
sort of input data to operate on, right?

6
00:00:19,097 --> 00:00:22,383
So functions are sequences of
instructions or sets of instructions, but

7
00:00:22,383 --> 00:00:23,767
they need some data to work on.

8
00:00:23,767 --> 00:00:27,940
So it is very common for a function to
have a set of what are called parameters

9
00:00:27,940 --> 00:00:31,849
of which are a set of variables that
are listed right after the function

10
00:00:31,849 --> 00:00:34,384
name in the declaration
in the parenthesis.

11
00:00:34,384 --> 00:00:38,686
And these are variables that they'll
become local variables that are used as

12
00:00:38,686 --> 00:00:40,082
inputs to the function.

13
00:00:40,082 --> 00:00:42,205
So the function actually operates
on these variables internally.

14
00:00:42,205 --> 00:00:46,756
Now an argument is the data
that's applied for

15
00:00:46,756 --> 00:00:50,263
those parameters during the call.

16
00:00:50,263 --> 00:00:54,208
So to give you an example, we've got
this function up here called foo.

17
00:00:54,208 --> 00:01:00,284
And in parenthesis after the word foo,
after the name, you see x int, y int.

18
00:01:00,284 --> 00:01:02,405
So in parenthesis is a list
of the parameters, so

19
00:01:02,405 --> 00:01:05,739
that means there are two parameters,
x and y, and they're both integers.

20
00:01:05,739 --> 00:01:09,483
So it expects somebody,
when the function gets called,

21
00:01:09,483 --> 00:01:13,236
it expects the caller to pass
two integers as arguments.

22
00:01:13,236 --> 00:01:17,321
And what it'll do is just print
the product, right, print x con times y.

23
00:01:17,321 --> 00:01:21,127
Now then, if we look in the main,
the main actually calls foo.

24
00:01:21,127 --> 00:01:25,353
And it calls foo and in parenthesis,
it says 2, 3, it has 2, 3.

25
00:01:25,353 --> 00:01:27,526
So 2 is going to be passed as x,

26
00:01:27,526 --> 00:01:32,516
3 is going to be bound to y inside
the function foo when it executes.

27
00:01:32,516 --> 00:01:38,800
So when foo executes, 2 will be x,
3 will be y, and it'll print 2 times 3.

28
00:01:38,800 --> 00:01:40,974
It should print out 6 when
you run a program like this.

29
00:01:40,974 --> 00:01:44,136
So having parameters is a very
common thing for a function,

30
00:01:44,136 --> 00:01:47,754
because functions often need some
kind of input data to operate on.

31
00:01:47,754 --> 00:01:49,924
So there's different ways
you can pass parameters.

32
00:01:49,924 --> 00:01:51,654
I'll just give a couple of examples.

33
00:01:51,654 --> 00:01:52,406
Maybe you don't need parameters.

34
00:01:52,406 --> 00:01:54,551
Sometimes a function
does not need parameters.

35
00:01:54,551 --> 00:01:57,817
Maybe it just does something static and
doesn't need input, or

36
00:01:57,817 --> 00:02:00,126
it gets input from some other place,
right?

37
00:02:00,126 --> 00:02:03,151
Maybe it gets input from the user
typing it in directly, or

38
00:02:03,151 --> 00:02:05,824
maybe it gets it from a file,
something like that.

39
00:02:05,824 --> 00:02:08,391
So sometimes you don't need arguments.

40
00:02:08,391 --> 00:02:12,547
So if that's the case,
then you still have to put the open paren,

41
00:02:12,547 --> 00:02:15,581
close paren in the declaration
after the name.

42
00:02:15,581 --> 00:02:18,807
So, func foo open paren, close paren,
you still need that there.

43
00:02:18,807 --> 00:02:21,735
You just don't put anything
in the parenthesis and

44
00:02:21,735 --> 00:02:24,877
then the compiler knows that
there are no parameters.

45
00:02:24,877 --> 00:02:29,432
Also, another sort of short hand is
when you have multiple arguments

46
00:02:29,432 --> 00:02:32,584
of the same type,
you can comma separate them.

47
00:02:32,584 --> 00:02:35,846
You don't have to write int,
int, int, over and over say.

48
00:02:35,846 --> 00:02:39,775
So in the case below where you got foo,
it has two arguments, x and y and

49
00:02:39,775 --> 00:02:40,985
they're both ints.

50
00:02:40,985 --> 00:02:43,642
You could write (x int,
y int) or just write (x, y int).

51
00:02:43,642 --> 00:02:49,157
It's just another way to write it.

52
00:02:49,157 --> 00:02:53,435
Now in addition to having parameters,
which are inputs to the function,

53
00:02:53,435 --> 00:02:57,444
a function can have an output,
one or more outputs or return values.

54
00:02:57,444 --> 00:03:01,835
So each return value has to have a type,
okay?

55
00:03:01,835 --> 00:03:06,164
So the type of the return value has to be
are listed in the function declaration on

56
00:03:06,164 --> 00:03:09,984
the top right after the arguments,
after the parameters are listed.

57
00:03:09,984 --> 00:03:13,612
So maybe you know you returned an integer,
or you know you returned a float,

58
00:03:13,612 --> 00:03:14,815
or something like that.

59
00:03:14,815 --> 00:03:20,306
And the function call, once you define
a function that has a return value,

60
00:03:20,306 --> 00:03:25,188
then the call to that function can
be used on the right-hand side of

61
00:03:25,188 --> 00:03:27,652
a variable assignment, sorry.

62
00:03:27,652 --> 00:03:31,723
It's easier if I just show you.

63
00:03:31,723 --> 00:03:33,956
So to give you an example,
we've got this function foo.

64
00:03:33,956 --> 00:03:38,274
It takes an argument x, so you see x
int in parentheses after the name foo.

65
00:03:38,274 --> 00:03:40,832
Then after that,
you see the word int, right?

66
00:03:40,832 --> 00:03:44,465
Before the open curly brackets and
closed curly brackets, you see int.

67
00:03:44,465 --> 00:03:48,395
That means that the return value,
its type is going to be an integer.

68
00:03:48,395 --> 00:03:51,826
And then inside the function,
inside the curly brackets,

69
00:03:51,826 --> 00:03:53,550
you see it says return x + 1.

70
00:03:53,550 --> 00:03:57,209
So if this function has a return
value like it does in this case,

71
00:03:57,209 --> 00:04:01,300
then you have to call return in
the function at the end of the function.

72
00:04:01,300 --> 00:04:04,716
And whatever is after the word return
is what's going to get returned.

73
00:04:04,716 --> 00:04:06,654
So x, whatever the value of x is plus 1,

74
00:04:06,654 --> 00:04:09,283
that's what's going to get
returned by this function.

75
00:04:09,283 --> 00:04:13,092
So this function just returns
an incremented version of the variable.

76
00:04:13,092 --> 00:04:20,141
Now then down below,
you see that assignment y := foo(1).

77
00:04:20,141 --> 00:04:21,597
Now this is taken out of context,

78
00:04:21,597 --> 00:04:24,412
that y := foo(1) would have to
be in a function of it's own.

79
00:04:24,412 --> 00:04:27,424
So let's assume that that
statement is inside a main, right?

80
00:04:27,424 --> 00:04:30,723
I didn't want to draw the whole main,
but let's assume it's in a main.

81
00:04:30,723 --> 00:04:31,886
So that's a function call.

82
00:04:31,886 --> 00:04:32,890
It's calling the foo function.

83
00:04:32,890 --> 00:04:35,060
It's passing as
the argument of number one.

84
00:04:35,060 --> 00:04:38,962
So one is going to get bound to x inside
the function foo when it gets executed.

85
00:04:38,962 --> 00:04:44,888
So the function foo, that call to foo,
will return x + 1, so it will return 2.

86
00:04:44,888 --> 00:04:49,010
So that foo (1) that
will be replaced in that

87
00:04:49,010 --> 00:04:52,716
assignment statement with the value 2.

88
00:04:52,716 --> 00:04:53,849
So it'll get evaluated.

89
00:04:53,849 --> 00:04:57,631
It will be replaced with a 2, and
then y will be assigned to the number 2,

90
00:04:57,631 --> 00:04:58,613
to the integer 2.

91
00:04:58,613 --> 00:05:02,911
So in this way, this is what happens
whenever, you have a return value,

92
00:05:02,911 --> 00:05:06,513
you've gotta do an assignment,
right, y := foo (1).

93
00:05:06,513 --> 00:05:08,711
If I didn't, say,
I just called foo (1), right?

94
00:05:08,711 --> 00:05:14,125
Then it would execute the function, but
the return value would go nowhere, right?

95
00:05:14,125 --> 00:05:18,426
I have to have a variable assignment so
that the return value or

96
00:05:18,426 --> 00:05:20,007
values get captured.

97
00:05:20,007 --> 00:05:24,731
In the last example I showed the function,
it had one return value, but

98
00:05:24,731 --> 00:05:27,268
you can have multiple return values.

99
00:05:27,268 --> 00:05:30,772
So in this example foo2,
we've got two return values.

100
00:05:30,772 --> 00:05:34,324
So if we look at the declaration,
func foo2 (x int),

101
00:05:34,324 --> 00:05:37,661
that's in parentheses,
so that's the argument.

102
00:05:37,661 --> 00:05:42,065
Then after that, you have parentheses,
again, another set of parentheses,

103
00:05:42,065 --> 00:05:42,729
int, int.

104
00:05:42,729 --> 00:05:48,023
And that means that you have two return
values, and they're both integers.

105
00:05:48,023 --> 00:05:52,773
And then after that, you have the code,
the code just return that x, x + 1.

106
00:05:52,773 --> 00:05:56,104
So those two return values,
well, the first one will be x,

107
00:05:56,104 --> 00:05:57,781
the second one will be x + 1.

108
00:05:57,781 --> 00:06:00,467
So they're listed after return,
they're comma separated.

109
00:06:00,467 --> 00:06:04,969
And then when say in a function main or
something like that,

110
00:06:04,969 --> 00:06:09,573
when I call foo2, see that a,
b := foo2(3), right?

111
00:06:09,573 --> 00:06:12,890
So what'll happen is that a, b, a and

112
00:06:12,890 --> 00:06:17,468
b will be assigned to the two
return values of foo2.

113
00:06:17,468 --> 00:06:20,983
So a is going to be assigned,
like in this case,

114
00:06:20,983 --> 00:06:25,618
foo2 is going to return x and
x + 1, so that'll be 3 and 4.

115
00:06:25,618 --> 00:06:28,162
So a would be bound to 3,
b would be bound to 4.

116
00:06:28,162 --> 00:06:29,940
Thank you.