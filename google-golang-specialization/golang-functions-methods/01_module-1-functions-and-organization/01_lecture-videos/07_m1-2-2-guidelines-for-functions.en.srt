1
00:00:00,000 --> 00:00:02,690
Module One; Functions and Organization.

2
00:00:02,690 --> 00:00:05,965
Topic 2.2; Guidelines for Functions.

3
00:00:05,965 --> 00:00:10,865
So, I'm going to give a few tips on making good functions, okay?

4
00:00:10,865 --> 00:00:12,475
Functions that are understandable.

5
00:00:12,475 --> 00:00:17,280
To facilitate debugging and other people understanding your code,

6
00:00:17,280 --> 00:00:18,945
working together with people, and so forth.

7
00:00:18,945 --> 00:00:20,790
Modification later, maybe you want to

8
00:00:20,790 --> 00:00:22,830
update your code you need to understand what you wrote.

9
00:00:22,830 --> 00:00:25,090
So to facilitate that there are a few tips.

10
00:00:25,090 --> 00:00:27,650
Function naming, really important.

11
00:00:27,650 --> 00:00:30,030
Give functions a good name for goodness sake some kind of

12
00:00:30,030 --> 00:00:32,905
a name that describes the behavior of the function.

13
00:00:32,905 --> 00:00:36,045
So, what you want your goal in the naming,

14
00:00:36,045 --> 00:00:39,330
if at all possible is that the behavior can be understood at a glance.

15
00:00:39,330 --> 00:00:42,560
So, you just look at the name and you know what this thing does.

16
00:00:42,560 --> 00:00:44,970
Now, parameter naming counts too.

17
00:00:44,970 --> 00:00:47,220
So, you also want parameters that are well named too,

18
00:00:47,220 --> 00:00:48,795
so you understand what they mean.

19
00:00:48,795 --> 00:00:50,895
So as an example,

20
00:00:50,895 --> 00:00:56,205
I'm showing two functions just the first line of the declaration, right?

21
00:00:56,205 --> 00:00:58,195
The first function is called process array,

22
00:00:58,195 --> 00:01:01,305
it takes a which is an integer slice

23
00:01:01,305 --> 00:01:05,710
and it returns the float and that's all I know about it right now, right?

24
00:01:05,710 --> 00:01:10,380
Now, if instead let's look at the bottom one which actually these two functions,

25
00:01:10,380 --> 00:01:12,550
these can do exactly the same thing, okay?

26
00:01:12,550 --> 00:01:14,180
But they're defined differently,

27
00:01:14,180 --> 00:01:15,430
they're declared a little bit differently.

28
00:01:15,430 --> 00:01:18,230
So the second one, is called ComputeRMS.

29
00:01:18,230 --> 00:01:23,390
It takes in a slice called samples of floats and it returns a float.

30
00:01:23,390 --> 00:01:26,560
So, notice that these two are compatible,

31
00:01:26,560 --> 00:01:28,360
these two are probably doing exactly the same,

32
00:01:28,360 --> 00:01:29,935
say they do exactly the same thing.

33
00:01:29,935 --> 00:01:35,935
That first line is declared the same way but their names are different.

34
00:01:35,935 --> 00:01:38,810
So, ProcessorArray versus ComputeRMS.

35
00:01:38,810 --> 00:01:43,630
Now, RMS remember these names are always domain dependent, okay?

36
00:01:43,630 --> 00:01:45,720
RMS stands for root mean square,

37
00:01:45,720 --> 00:01:50,190
if you look in a time varying signal it is something like an average, okay.

38
00:01:50,190 --> 00:01:53,390
Now, I don't want to go into what RMS is but if you know this type of stuff you're in,

39
00:01:53,390 --> 00:01:56,390
if you're working in this domain you would know what RMS is.

40
00:01:56,390 --> 00:01:59,920
So ComputeRMS has a distinct meaning to anybody working in this domain.

41
00:01:59,920 --> 00:02:02,625
So you look at that and you know instantly what that is.

42
00:02:02,625 --> 00:02:05,280
ProcessArray can mean anything, right?

43
00:02:05,280 --> 00:02:07,390
Process how? Right? Who knows?

44
00:02:07,390 --> 00:02:10,015
Now then, also look at the name of the argument.

45
00:02:10,015 --> 00:02:12,520
For ProcessArray the argument it's called a,

46
00:02:12,520 --> 00:02:13,970
that is completely generic.

47
00:02:13,970 --> 00:02:17,260
Who knows what that is? Where ComputeRMS,

48
00:02:17,260 --> 00:02:19,350
I call it samples? Because guess what?

49
00:02:19,350 --> 00:02:22,170
It's a bunch of samples of a time-varying signal, right?

50
00:02:22,170 --> 00:02:28,050
So, the naming gives you some an idea of what type of data is being parsed and I

51
00:02:28,050 --> 00:02:30,645
can look at it and understand what it's doing without knowing

52
00:02:30,645 --> 00:02:33,910
anything about the actual code inside the function, about how it's implemented.

53
00:02:33,910 --> 00:02:36,825
I can just look at the name and say, "Ah that's what it is".

54
00:02:36,825 --> 00:02:38,415
So that's what you want.

55
00:02:38,415 --> 00:02:41,475
Now, notice that these names,

56
00:02:41,475 --> 00:02:43,440
they're going to be domain dependent, right?

57
00:02:43,440 --> 00:02:46,810
So ComputeRMS, you have to know what

58
00:02:46,810 --> 00:02:50,600
RMS is but that's a shorthand that anybody who does this type of work,

59
00:02:50,600 --> 00:02:52,630
who works on time-varying signals,

60
00:02:52,630 --> 00:02:54,190
they're going to know what an RMS is.

61
00:02:54,190 --> 00:02:56,255
So that's a good name.

62
00:02:56,255 --> 00:03:00,765
Now, another thing about names that I skipped here is that you don't want to be too long.

63
00:03:00,765 --> 00:03:02,720
Okay? People can go overboard,

64
00:03:02,720 --> 00:03:06,500
they can make them so descriptive there, just burdensome, okay?

65
00:03:06,500 --> 00:03:09,440
You don't want it to be too long and how long is too long? I don't know.

66
00:03:09,440 --> 00:03:12,340
ProcessArray is getting there as long as I wanted to be,

67
00:03:12,340 --> 00:03:13,650
maybe a little longer than that.

68
00:03:13,650 --> 00:03:17,140
There's no hard limit on that but you don't want to put too many words together,

69
00:03:17,140 --> 00:03:18,735
right? It gets ridiculous.

70
00:03:18,735 --> 00:03:26,100
So, naming is really important and in my classes I teach Python,

71
00:03:26,100 --> 00:03:33,380
here at UCI and I tell students this and they don't listen.

72
00:03:33,380 --> 00:03:35,930
They still name these variables X and I'm like what the heck?

73
00:03:35,930 --> 00:03:36,960
And they are like,

74
00:03:36,960 --> 00:03:38,220
"Professor Harris, what's wrong with the code?"

75
00:03:38,220 --> 00:03:40,630
I have no idea, I don't know what X and Y and Z are.

76
00:03:40,630 --> 00:03:42,010
How am I supposed to know?

77
00:03:42,010 --> 00:03:45,180
And nobody can know that and sure maybe you don't care what the professor thinks but

78
00:03:45,180 --> 00:03:48,660
you will one day work with a group of people and your boss will be like,

79
00:03:48,660 --> 00:03:49,875
"Okay, what is this?"

80
00:03:49,875 --> 00:03:51,885
All right and he/she will get upset.

81
00:03:51,885 --> 00:03:55,640
You know what I'm saying? If you want to work with people,

82
00:03:55,640 --> 00:03:56,925
naming is really important.

83
00:03:56,925 --> 00:04:00,700
And you yourself when you look at the code later like a month later,

84
00:04:00,700 --> 00:04:04,155
it will be much easier for you to understand your own code if you have good naming.

85
00:04:04,155 --> 00:04:05,730
All right, another thing that you want in

86
00:04:05,730 --> 00:04:09,765
function definitions is you would like to have functional cohesion.

87
00:04:09,765 --> 00:04:12,399
So what that means is that the function should perform,

88
00:04:12,399 --> 00:04:18,100
only one "operation" and note I put operation in quotes because what is an operation?

89
00:04:18,100 --> 00:04:19,800
I don't mean one instruction;

90
00:04:19,800 --> 00:04:21,575
plus, minus something like that.

91
00:04:21,575 --> 00:04:24,150
An operation the size of it, the complexity of it,

92
00:04:24,150 --> 00:04:28,270
really depends on the context on what the application is that you're making.

93
00:04:28,270 --> 00:04:30,245
So, giving an example,

94
00:04:30,245 --> 00:04:32,070
say you've got some geometry application.

95
00:04:32,070 --> 00:04:35,280
I don't know it's doing things with points in three dimensions.

96
00:04:35,280 --> 00:04:39,905
Maybe you got some functions like point dist for point distance,

97
00:04:39,905 --> 00:04:42,435
the distance between two points. Common thing you might do.

98
00:04:42,435 --> 00:04:44,425
Draw a circle, triangle area,

99
00:04:44,425 --> 00:04:48,650
these names are all things that are in the domain geometry and these names

100
00:04:48,650 --> 00:04:50,630
are all good names meaning you can look at

101
00:04:50,630 --> 00:04:52,920
the name and figure out what it does and not too long.

102
00:04:52,920 --> 00:04:54,940
Okay? So, just from the name you can look,

103
00:04:54,940 --> 00:04:57,845
you don't have to look inside the code, you can just look at the name.

104
00:04:57,845 --> 00:05:01,340
Now, what I mean by functional cohesion is you

105
00:05:01,340 --> 00:05:04,700
would like it if each function did basically one thing.

106
00:05:04,700 --> 00:05:08,090
So, point dist it computes one thing,

107
00:05:08,090 --> 00:05:09,425
the distance between two points.

108
00:05:09,425 --> 00:05:11,200
Draw circle, it draws a circle,

109
00:05:11,200 --> 00:05:17,380
it does one thing that makes sense in the domain of geometry applications in this case.

110
00:05:17,380 --> 00:05:24,240
Now, let's say though that you're making this geometry application and there's some case,

111
00:05:24,240 --> 00:05:26,520
some instance where under some conditions you need to

112
00:05:26,520 --> 00:05:29,250
draw a circle and then you need to compute the area of a triangle.

113
00:05:29,250 --> 00:05:32,900
You might have to do that, do the one thing and then the next.

114
00:05:32,900 --> 00:05:39,270
So, it would be a bad idea to put both those operations into the same function.

115
00:05:39,270 --> 00:05:40,910
You might say, "Well, I'm going to need to do both,

116
00:05:40,910 --> 00:05:43,830
I'll just put them into the same function and it can draw

117
00:05:43,830 --> 00:05:46,840
a circle and it can compute a triangle's area."

118
00:05:46,840 --> 00:05:49,850
One function that can do either or let's say.

119
00:05:49,850 --> 00:05:53,745
That would be a bad mistake because now you've got a function that does

120
00:05:53,745 --> 00:05:56,400
two things and the reason why that's a bad mistake

121
00:05:56,400 --> 00:05:59,215
is because it doesn't make sense to the human.

122
00:05:59,215 --> 00:06:01,580
Meaning how would you name such a function?

123
00:06:01,580 --> 00:06:04,115
Draw a circle compute triangle area,

124
00:06:04,115 --> 00:06:12,375
it's much cleaner in your mind if the operations that the function performs are separate.

125
00:06:12,375 --> 00:06:15,660
So drawing a circle and computing a triangle area,

126
00:06:15,660 --> 00:06:19,850
they are two separate functions to most people who think about geometry.

127
00:06:19,850 --> 00:06:21,295
They're two separate things,

128
00:06:21,295 --> 00:06:23,050
so you'd want to keep them as separate functions.

129
00:06:23,050 --> 00:06:25,560
If you start putting them together then it just doesn't make sense to

130
00:06:25,560 --> 00:06:28,345
the human and you want it to make sense.

131
00:06:28,345 --> 00:06:32,530
You basically when you write this code you want to be idiot proof, okay?

132
00:06:32,530 --> 00:06:34,860
You got to expect that a bunch of idiots are working with

133
00:06:34,860 --> 00:06:37,920
you and they're going to be looking at your code and they don't understand a thing.

134
00:06:37,920 --> 00:06:40,620
So you got to make this code so easy and obvious for

135
00:06:40,620 --> 00:06:43,560
them that they can't help but understand what you're doing, okay?

136
00:06:43,560 --> 00:06:45,645
That's what I'm going for here, right?

137
00:06:45,645 --> 00:06:49,769
You want it to be obvious and putting together different functions,

138
00:06:49,769 --> 00:06:52,800
different operations into the same function is a confusing thing.

139
00:06:52,800 --> 00:06:58,805
So you want to separate these operations into different functions if you can.

140
00:06:58,805 --> 00:07:03,400
So another thing to do with functions to make them simpler,

141
00:07:03,400 --> 00:07:05,885
is to reduce the number of parameters, okay?

142
00:07:05,885 --> 00:07:08,200
Limit the number of parameters that you take.

143
00:07:08,200 --> 00:07:10,420
So more parameters just means

144
00:07:10,420 --> 00:07:12,130
more complication because if you're trying to

145
00:07:12,130 --> 00:07:14,300
understand what a function does say, it goes wrong.

146
00:07:14,300 --> 00:07:16,365
Say it takes 20 parameters,

147
00:07:16,365 --> 00:07:18,620
you got to look at all 20 of these parameters, right?

148
00:07:18,620 --> 00:07:20,420
And which one could it be?

149
00:07:20,420 --> 00:07:24,820
It's much easier if you have fewer parameters that you can keep track of so because

150
00:07:24,820 --> 00:07:29,410
debugging generally requires tracing the data and which of the parameters.

151
00:07:29,410 --> 00:07:30,745
So if you have to trace that back,

152
00:07:30,745 --> 00:07:33,010
you don't want to have to trace back 20 different pieces of data,

153
00:07:33,010 --> 00:07:35,290
you'd like to trace back five or something like

154
00:07:35,290 --> 00:07:38,260
that or look through five pieces of data rather than 20.

155
00:07:38,260 --> 00:07:40,530
So, the fewer the better.

156
00:07:40,860 --> 00:07:45,380
So, debugging is just generally harder when you have more parameters.

157
00:07:45,680 --> 00:07:48,340
Now you got to think of why it happens like,

158
00:07:48,340 --> 00:07:51,415
say you do make a function that does have a lot of parameters?

159
00:07:51,415 --> 00:07:53,330
Why did that happen?

160
00:07:53,330 --> 00:07:57,924
It may be that the functions you wrote had bad functional cohesion.

161
00:07:57,924 --> 00:07:59,770
So, let us say for instance,

162
00:07:59,770 --> 00:08:01,570
you made the mistake I talked about before,

163
00:08:01,570 --> 00:08:06,790
you want a function that can draw a circle or it can also compute a triangle's area.

164
00:08:06,790 --> 00:08:09,880
These two operations require entirely different arguments,

165
00:08:09,880 --> 00:08:12,090
drawing a circle requires information about the circle,

166
00:08:12,090 --> 00:08:13,755
its center, it's radius basically.

167
00:08:13,755 --> 00:08:18,050
Drawing a computer triangle's area requires information about the triangle,

168
00:08:18,050 --> 00:08:20,635
maybe its points, its coordinates, or something like that.

169
00:08:20,635 --> 00:08:23,010
So, if you make a function that does both of

170
00:08:23,010 --> 00:08:26,610
these operations it's got to take all the arguments for both different things.

171
00:08:26,610 --> 00:08:30,480
And so you would tend to get more arguments, more parameters,

172
00:08:30,480 --> 00:08:33,810
so you want to reduce the number of parameters,

173
00:08:33,810 --> 00:08:35,850
you may want to look at the code and say,

174
00:08:35,850 --> 00:08:38,580
"Oh, wait a minute I'm putting these two operations together,

175
00:08:38,580 --> 00:08:39,750
I can separate them and

176
00:08:39,750 --> 00:08:45,850
reduce the number parameters required to parse to each individual function."

177
00:08:46,440 --> 00:08:51,080
Okay, so, another way to reduce the number of parameters.

178
00:08:51,080 --> 00:08:53,600
Say you can't split it the way I just said,

179
00:08:53,600 --> 00:08:58,760
say this function does have good cohesion, okay?

180
00:08:58,760 --> 00:09:01,185
So that's not a thing you can do is just split it.

181
00:09:01,185 --> 00:09:07,210
One thing you might look into is grouping related arguments into structures.

182
00:09:07,210 --> 00:09:09,010
So, as an example,

183
00:09:09,010 --> 00:09:11,630
say you got a triangle area function.

184
00:09:11,630 --> 00:09:14,010
A bad solution for this,

185
00:09:14,010 --> 00:09:17,490
when I say bad solution, a solution for parsing its parameters.

186
00:09:17,490 --> 00:09:20,595
You could say its parameters are three points, okay?

187
00:09:20,595 --> 00:09:22,440
Because you need three points to define a triangle, right?

188
00:09:22,440 --> 00:09:25,270
So you got to give it three points and each point let's

189
00:09:25,270 --> 00:09:28,415
say is in three-dimension space, we're working in.

190
00:09:28,415 --> 00:09:31,080
So each point is going to have three floats associated with it, right?

191
00:09:31,080 --> 00:09:33,575
XYZ. So in total,

192
00:09:33,575 --> 00:09:36,900
I can say this triangle area could take nine different arguments, right?

193
00:09:36,900 --> 00:09:38,190
XYZ for the first point,

194
00:09:38,190 --> 00:09:39,990
XYZ for the next, XYZ for the next.

195
00:09:39,990 --> 00:09:41,830
It is a lot of arguments, right?

196
00:09:41,830 --> 00:09:45,390
A better solution, good solution I'll say better solution let's say,

197
00:09:45,390 --> 00:09:49,110
not the best but better solution is instead,

198
00:09:49,110 --> 00:09:52,250
I define a new structure called point, right?

199
00:09:52,250 --> 00:09:53,565
And this structure called point,

200
00:09:53,565 --> 00:09:55,250
it has X and Y and Z.

201
00:09:55,250 --> 00:09:57,314
It has three floats XYZ.

202
00:09:57,314 --> 00:10:01,745
Then, once I define that instead of passing to my triangle area,

203
00:10:01,745 --> 00:10:04,660
nine different values for X and Y and Z, XYZ,

204
00:10:04,660 --> 00:10:07,710
XYZ, I can parse it three things, three points.

205
00:10:07,710 --> 00:10:10,275
That each point inside it has three floats

206
00:10:10,275 --> 00:10:13,285
but when I'm looking at my declaration for triangle area,

207
00:10:13,285 --> 00:10:15,170
I only see three things point one, point two,

208
00:10:15,170 --> 00:10:16,790
point three and it makes more sense,

209
00:10:16,790 --> 00:10:18,405
it's easier to understand in my mind.

210
00:10:18,405 --> 00:10:21,630
Now, an even better solution that I didn't put up here is I

211
00:10:21,630 --> 00:10:25,065
can say triangle area takes one argument which is a triangle.

212
00:10:25,065 --> 00:10:28,840
So I can make another structure which is a triangle type rather,

213
00:10:28,840 --> 00:10:31,200
and this triangle, it could have three points

214
00:10:31,200 --> 00:10:33,960
associated with it and each point has three floats.

215
00:10:33,960 --> 00:10:36,540
So I could make a triangle area that just takes

216
00:10:36,540 --> 00:10:39,335
one argument which is a triangle structure, right?

217
00:10:39,335 --> 00:10:42,840
That's even better, so anyway

218
00:10:42,840 --> 00:10:47,920
this type of thing by grouping related piece of data into structures.

219
00:10:48,110 --> 00:10:52,965
You can reduce the amount of arguments you get to parse your function.

220
00:10:52,965 --> 00:10:55,955
Now, remember don't force this meaning,

221
00:10:55,955 --> 00:10:58,920
only group pieces of data if they are actually related, right?

222
00:10:58,920 --> 00:11:01,470
You don't want to group completely random pieces of data into

223
00:11:01,470 --> 00:11:04,600
one structure because then you get a structure that makes no logical sense.

224
00:11:04,600 --> 00:11:07,660
You don't want that but often you can find the ones

225
00:11:07,660 --> 00:11:11,100
that are related and put them together. Thank you.